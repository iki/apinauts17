FORMAT: 1A
HOST: https://api.csas.cz/sandbox/webapi/api

# Sandbox Netbanking V3

Last update: **27.09.2016**

<!-- Wikipedia Links -->
[JSON-Wikipedia]: http://en.wikipedia.org/wiki/JSON
[UUID-Wikipedia]: http://en.wikipedia.org/wiki/Universally_unique_identifier
<!-- Signing Links -->
[Signing Resources Reference]: #reference/signing
[Immutable Signing Resources Reference]: #reference/signing/signing-immutable-orders
[Immutable Signing Resources Reference - GET]: #reference/signing/signing-immutable-orders/signing-step-1-get
[Manageable Signing Resources Reference]: #reference/signing/signing-manageable-orders
[Manageable Signing Resources Reference - GET]: #reference/signing/signing-manageable-orders/signing-orders-step-1-get
[Sign Polling Resource Reference]: #reference/signing/sign-polling/sign-polling

# Basic Mechanisms

This API is a HTTP-1.1 REST service that provides access to user and accounting data of Ceska Sporitelna customers. Using this API you can list/read data about client's products etc.
API is intended for developers of internet banking and other accounting applications but still it is general purpose API with no single predefined use in mind.

**Note** If You're already using our system test or production environment please be sure You familiarized yourself with the API integration guide:
https://github.com/Ceskasporitelna/WebAPI/wiki/The-integration-of-API-in-the-CS

## Server Calls

Server calls are done via https by using one of the following HTTP methods:

| Method | Idempotent | Change State | Purpose |
| ------ | ------ | ------ | ------ |
| GET | yes | no | **select**: read-only call (e.g. get account list) |
| POST | no | yes | **create**: add a new resource (e.g. create a new transaction), call a function |
| PUT | yes | yes | **update**: change an existing resource (e.g. set a message read, lock a card) |
| DELETE | yes | yes | **delete**: remove an existing resource (e.g. delete a message) |

Resources are all URIs that deliver business data (e.g. accounts, transactions, messages, ...) while functions are calls that may or may not return data but do not operate on business data (e.g. login).

All data provided by the client has to be in UTF-8 encoding.

GET, PUT und DELETE calls are idempotent. It does not matter for the server state if this call is used only once or multiple times (with the same resource/payload). POST calls, usually creating new stuff, should not be repeated by clients, because they will result in duplicated data.

Successfull DELETE calls result in a "HTTP 204 - No content" reply and the resource being removed.

The server must support gzip'ed content and all clients are strongly recommended to request gzip'ed content via the HTTP header:
```
Accept-Encoding: gzip
```

### Authentication and Authorization

This API is not responsible for authentication (i.e. validate if a user/client/principal is who he/she/it claims to be, e.g. by checking user&passwords) but only of authorization (i.e. validate if a user/client/principal can access a resource here and now). Therefore, it is based on a token security concept and only needs to check the validity of such tokens which a client provides for each call as proof it may access the requested data.

As far as this API is concerned, this token is a "black box" which is part of each client request. The API provides the received token to a server-side verification library or service, and if the token turns out to be valid for the specific requested call, the business logic is executed. The API does not have to parse the token itself.

This API can work with any type of token, as long as the following assumptions are valid:

* The token already is in a format/encoding allowed to be passed as HTTP 'Authorization' header field.
* The token is maximum 1024 bytes in length (as it has to be transferred with each request, and on mobile phones every ms counts). However, average tokens should be much shorter (e.g. 256 bytes) to reduce upload traffic for each and every request.
* It is possible (for a library) to verify the validity of the token.
* It is possible (for a library) to derive the user from the token.
* It is possible (for a library) to derive the **fine granular permissions** from the token. This includes a separate read and write permission down to an individual **business object level** (e.g. one specific account, message or template). However, a token should alternatively refer permissions in larger units, especially on entities the User owns, e.g. "all my accounts".

**Note:** *OAuth 2.0 bearer token will be used, which encapsulate SAML permissions. This match the above requirements.*

The token in request is sent by the client as HTTP `Authorization:` header:
```
Authorization: Bearer ya29.AHES67zeEn-RDg9CA5gGKMLKuG4uVB7W4O4WjNr-NBfY6Dtad4vbIZ
```

In order to use _OAuth 2.0_ in your application, use following settings: 

| Name | Parameter | Value |
| ------ | ------ | ------ |
| Client Identification | client_id  | WebExpoClient |
| Client Secret | client_secret| 201509201300 |
| Authorization URI | | https://api.csas.cz/sandbox/widp/oauth2/auth |
| Redirect URI | redirect_URI | https://api.csas.cz/sandbox/widp/oauth2/redirect |
| Access Token URI | | http://api.csas.cz/sandbox/widp/oauth2/token |
| Scope | scope | profile |


**Example URL to login page (implicit grant):**

<code>https://api.csas.cz/sandbox/widp/oauth2/auth?state=profil&redirect_uri=https://api.csas.cz/sandbox/widp/oauth2/redirect&client_id=WebExpoClient&response_type=token</code>


**Demo user:**

| Parameter | Value |
| ------- | ------- |
| Login | 7777777777 |
| Password | Choose any password |

For more information about implementation _OAuth 2.0_ in your application, see OAuth 2.0 
documentation.

    Note: You must use either an OAuth 2.0 access token, an API key or anonymous access 
    for all your applications. 

    Not all APIs require authorized calls. See this API documentation to learn whether 
    authorization is required for specific calls.

The _OAuth 2.0_ access token is time limited. 

Application (e.g. daily job) can overcome this limitation and request not only access token but refresh token as well. 
Refresh token is not time limited and can be exchanged for access token when original access token gets expired.
This type of _OAuth 2.0_ usage is called offline access.

### API Key

To control access of different front-end applications to webapi resources API key concept has been introduced. For every FE application new API key should be generated (by bank). FE developers should also request access to particular resources for this API key.
API key must be present in all requests made by particular application in `WEB-API-key:` HTTP header. Key is validated by server and it is checked if it is allowed to use this key for particular resource.

```
WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
```

### Authentication in File Downloads in Old Browsers

In order to overcome the limitations in old browsers, some file download endpoints supports file downloads as a result of form post calls. These calls return the required file immediately. Authorization information is carried in the hidden field of the form post call.

```
<form action="/api/netbanking/my/cards/id/invoices/2014_02/pdf" method="post"  accept="application/pdf">
   <input type="hidden" name="access_token" value="<token>">
   <input type="hidden" name="WEB-API-key" value="<key>">
   <input type="submit" value="download" />
</form>
```

### Authentication in File Uploads in Old Browsers

For limitations similar in File downloads in old browsers, some upload endpoints support passing the authorization token in a hidden form field in multipart form posts.

```
<form action="/api/backoffice/donation/ngos/<id>/qlogo" method="post" enctype="multipart/form-data" accept="application/json">
   <input type="hidden" name="access_token" value="<token>">
   <input type="hidden" name="WEB-API-key" value="<key>">
   <input type="file" name="file">
   <input type="submit" value="upload" />
</form>
```

### Session Cookies

In theory, each server call could be stateless and only use the token to reconstruct state. However, this will probably result in a performance impact, can be a cost issue due increased backend/host requests, and also would render current load balancing infrastructure useless.

Therefore, each time an server call is done that does not provide a standard Java Session Cookie (JSESSIONID), the reply will contain a new such session cookie. It is in the interest of the client to re-provide this cookie with each follow up call to make use of server-side caching. If the cookie is not re-sent, the call still will work but a slower reply will be the result.

```
Set-Cookie: JSESSIONID=Zw4LQndKc2ffHXM7r9NY9r2nBVbJytpnh3lt6p2R9cTQLFNz5CG5!-2028444187;
```

The server will store the last-provided authentication token in the server-side session upon the first call. If the token and the session ID still match on a successive call, then it is not necessary for the server to re-validate the token as long as it is not expired. If however the token does not match to the session ID, which means the client is suddenly providing a new token, the session is immediately destroyed and a new one is created based on the new provided token. The resulting new `JSESSIONID` is sent to the client for re-use in successive calls.

Session Cookies are valid for 2 minutes or the validity of the authentication token, whichever is _shorter_.

### Content Types and Languages

The client has to specify what type of content it expects via ordinary HTTP headers:

```
GET /path/to/some/resource HTTP/1.1
Host: www.example.org
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:16.0) Gecko/20100101 Firefox/16.0
Accept: application/json
Accept-Language: en-US
```

**Accept**: What type of content should be returned. Currently, only `application/json` is supported. This is also the default if no `Accept:` header is given.

**Accept-Language** and **Client-Accept-Language**: In case language-dependent content is in the reply (GUI texts, pre-formatted amounts or dates, ...), the language-dependent infos of this language should be used by the server to translate/pre-format. Header `Client-Accept-Language` has higher preference than `Accept-Language`. If no language is given in these headers, `cs-CZ` is assumed. The server may ignore these fields in case the user has a server-side language setting which overrules any request setting.

### Server Side Pagination

The most of the calls that return lists support pagination. The client can request the content in pages providing a **size** and a **page** number. Those are given as URL parameters like the following example: 

`GET /path/to/some/resource?size=25&page=1`

**Page** count starts at zero, so 0 is the first page, 1 the second and so forth. If **size** is given without any **page**, **page** = 0 is assumed. There is no predefined **size** limit. If it is omited, all records are returned in one large list. However, some calls might introduce a size limit due the fact that a certain backend would be overloaded by returning too many items in one call - in such a case, the individual call descriptions will state that clearly.

### Server Side Sorting

Some calls allow their output to be pre-sorted. This can be requested by giving the **sort** and **order** URI parameters, for example:

```
GET /path/to/some/resource?sort=date&order=desc
```

Each call description below states if and what fields it supports to sort. The optional **order** can be either **asc** or **desc** (case insensitive), with **asc** as default. If no **sort** is given, a random order has to be assumed that can change between calls.
Sorting multiple fields at the same time is possible by comma-separating the fields and their corresponding **sort** orders. Sort priorities are left to right, so within the first field it is sorted by the second etc. Missing corresponding **order** entries are considered to be **asc**. For example:

```
GET /path/to/some/resource?sort=date,title,name&order=desc,,desc
```

Sorting by optional attribute in response should be done that way that first will be provided items with value (in requested order) and then items without attribute value (null or missing attribute value).
For paginated output, sorting is done before pagination, so the whole list not only one single page is sorted. Resources/Lists requested without giving any sorting parameters should be considered to be in random order.

### Alternate Header Names

In some cases it might not be possible for an application to change certain HTTP headers. For example, a website calling this API via JavaScript from within an older browser might not be able to override the `Accept-Language:` header. In such a case corresponding alternate header names prefixed with `Client-` can be used.
This feature is not enabled for all possible headers. See complete list of headers for which `Client-*` form is possible. 

List of possible alternate headers:
```
Client-Accept-Language: en-US
```

### Last Modified

Some calls support the HTTP last modified mechanism (this is stated in those calls that do). For such calls, the client may provide a standard RFC-complaint HTTP `If-Modified-Since` header, and resources delivered by that calls include a `Last-Modified` header.

```
GET /path/to/some/resource HTTP/1.1
Host: www.example.org
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:16.0) Gecko/20100101 Firefox/16.0
If-Modified-Since: Wed, 19 Oct 2005 10:50:00 GMT
```

If the resource was not modified since the given timestamp, a `HTTP 304` is returned (means "not modified"). If the resource was updated on this time or thereafter, the resource is returned.

**Note:** *This does not do delta handling. If `If-Modified-Since` is used on a list, all or none items are returned, not only the part of the list that is newer.*

Since HTTP's `If-Modified-Since` only supports seconds, but data on the server might be more precise, the following mechanism is in place: If a resource has a last modified date of a fraction of a second, and a client requests this resource within the very same second, the server returns the resource as `Last-Modified` with the second rounded down. E.g. for a resource that has a timestamp of 12:30:00.123, 12:30:00 is returned. If the request is done at a later point in time, the `Last-Modified` second is to be rounded up. This is done to avoid that the client might miss an update due the higher precision of time on the server than in the HTTP headers, at the cost that in the - rare - event, that if a resource is queried at the very same second it was changed, it might be queried twice due the rounded down timestamp.

## Server Request

### JSON

In case of POST / PUT / DELETE requests business data is accepted as JSON data (if it is not binary data). See [Wikipedia][JSON-Wikipedia] for details on JSON.
Empty arrays `[]` and `null` values must be omitted from input data.

### Error Handling

JSR-303 validation is applied to the provided JSON input data according to the appropriate data model.

## Server Reply

All payload data returned by the server is in UTF-8 encoding.

If **no error** occurred, the server replies with a HTTP 200 status code and the payload contains the JSON with all relevant data, or a HTTP 204 status code and no body/payload if the call does not produce data. For **logical errors** like empty fields, field parsing errors, missing mandatory fields etc. the server replies with HTTP 400 and a JSON error object (see section below). For **framework** and **meta-errors** (authentication failed, wrong URL, ...) the corresponding HTTP Error codes are used and the payload contains a JSON error object. If a resource can't be found due to inactive products in BackEnd or wrong id ( e.g. `GET /netbanking/my/contracts/buildings/{id}` ) the server replies with HTTP 404 and a JSON error object describing the reason (e.g. ID\_NOT\_FOUND or PRODUCT\_NOT\_ACTIVATED) has to be returned.
All responses contains custom header **cz-transactionId** which contains identification of the particular call. If you want to report bug or to investigate what happend behind rest interface please provide this identifier.


| Code | Purpose |
| ------ | ------ |
| 200 | indicates no technical error happened |
| 204 | like 200, but no body/payload will be sent back |
| 400 * | logical error in parsing request (e.g. ID does not exist, mandatory field missing, ...) |
| 403 * | user not logged in, invalid token, etc. |
| 404 * | this kind of resource does not exist |
| 415 | unsupported media type (Accept/Accept-Language unsupported) |
| 500 * | internal error happened (a Java exception happened) |

**Legend:** * - returns JSON error object

### JSON

Business data is returned as JSON data (if it is not binary data like images). See [Wikipedia][JSON-Wikipedia] for details on JSON.
JSON data has no root object and it should look like

```
{
... do this ...
}
```

but **not like this**

```
"objectname" : {
... don't do this ...
}
```

Undefined or unused optional fields are omitted in the JSON output and must not be delivered as `null` nor as empty strings. If the distinction between empty and not available is necessary, of course an empty string is still a valid response.

Empty arrays `[]` and `null` values must be omitted from output data (response payload).

### WebAPI Error Communication

If a call fails with one of the HTTP error codes, the payload will contain a top-level `errors` JSON array. It contains one entry per logical error that describes more in detail what happened.

Description of the error payload:

| Attribute              | Type   | Mandatory | Description |
| ---------------------- | ------ |:---------:| ----------- |
| errors.error           | TEXT   | m         | Code of the error. Identifies what happened. Errors are given as codes of `WORDS_AND_UNDERSCORES` (see also Naming Conventions). It is the responsibility of the FE client application to convert them using the language of the user. |
| errors.scope           | TEXT   | o         | If error is related to one of the fields in request this field contains identification of the field. For fields in JSON payload it is simple path in JSON structure (f.e. receiver.number). Array items are qualified via `[123]`. If error is in url variable it is identified by `{pathParams}` (f.e. {pathParams}.id). |
| errors.parameters      | OBJECT | o         | Array of parameters which could be used in error message constructed by FE application. Every attribute of parameters object represents one parameter. Name of the attribute is name of the parameter. Value of the attribute is value of the parameter. Type of the parameter could vary - TEXT, NUMBER, DATE, ... |
| cz-transactionId       | TEXT   | m         | Identification of the current call. For tracing purposes. |

Example of the error response payload:

```
"errors": [
    {
        "error":"SOME_ERROR_CODE",          // error code        
    },
    {
        "error":"ANOTHER_ERROR_CODE",       // error code
        "scope":"account.amount.currency"   // optional attribute indicating JSON parameter name that caused the error. Provided by WebAPI logic/validation when applicable
    },
    {
        "error":"OTHER_ERROR_CODE",         // error code
        "parameters": {                     // list of named parameters for current message
            "AMOUNT_ENTERED": 10000,        // named parameter "AMOUNT_ENTERED" and its value
            "CURRENCY": "EUR",              // named parameter "CURRENCY" and its value
            "LIMIT": 500,                   // named parameter "LIMIT" and its value
        }
        "scope":"orders[3].amount.value"    // scope can use array index for identification of particular field
    }
],
"cz-transactionId": "160216825156501"
```

The following common error codes are defined:

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 403 | TOKEN\_NOT\_ALLOWED | The provided token does not allow this call. |
| 403 | TOKEN\_EXPIRED | The provided token is expired. |
| 403 | TOKEN\_INVALID | The provided token not a valid token (syntax error). |
| 400 | FIELD\_NOSORT | The field (given in the "scope" field of the error) can not be used for sorting (does not exist, does not support sorting). |
| 400 | RESOURCE\_NOSORT | Resource does not support sorting. |
| 500 | INTERNAL\_SERVER\_ERROR | A technical exception occurred. |

If a call can produce additional errors, they are listed in each call separately.

### Pagination

If a request requires paginated output (see Server calls/Server side Pagination above), the reply will contain in addition to the array with a page's items the following fields:

```
{
    "pageNumber": (INTEGER),
    "pageCount": (INTEGER),
    "nextPage": [INTEGER],
    "pageSize": (INTEGER),
    "page": [
        { ...item...},
        { ...item...},
        { ...item...}
    ]
}
```

**pageNumber**: The page number of provided list items from total query result set.
**pageCount**: The total count of pages as result of calculation using the requested page size and total records in query result set.
**nextPage**: Optional page number of the next page, if exists the nextPage value equals pageNumber+1, if current pageNumber is the last page of result set then nextPage field is not provided.
**pageSize**: The page size used. Either the number supplied by the client in request is returned here, or in case there is a page size limit for call and its value is less than the requested one, the actual size is returned.
**page**: The page's items. Note that `page` can be any name, e.g. `accounts`, `cards`, `transactions`.

## Naming Conventions

### JSON Fields

* Field names are in English.
* Field names are written camelCase.
* The first letter is always lowercase.
* Arrays have plural names and end with **s** or **es**.
* Abbreviations are always written with first letter uppercase (IBAN -> Iban).
* The main ID of an object is called just **id**.
* All other referred ids are given via the name of the referred object plus 'Id'.
* Field names do not have a prefix of the object type, so it's not **accountName** but just **name**.

Examples:

```
{
    "id": 1,
    "anotherId": 5,
    "remoteIds": [ 7, 8, 9 ],
    "flyingWalruses": [ "walrus 1", "walrus 2" ],
    "iban": "some IBAN",
    "someOtherIban": "other IBAN",
    "flags": [ ... array ... ]
}
```

### Error Codes

* Error codes are English.
* Error codes are given all uppercase.
* Underscores separate multi-word codes.
* Error codes are self-explanatory descriptions, not internal codes or strings without obvious meaning.
* Error codes follow a NOUN or NOUN\_ADJECTIVE pattern.
* Error codes are **not** UI-Texts and need a mapping first.
* Error codes may get long if that helps to increase clarity.

Examples:

```
ID_NOT_FOUND
SYNTAX_ERROR
DAILY_LIMIT_EXCEEDED
WALRUS_FLEW_AWAY
CLARITY_INCREASED_BY_VERY_LONG_ERROR_CODES
```

### Flags

Entries for the (FLAG) datatype (definition below) follow the same conventions as JSON-Fields. In addition the following rules apply:

* Flags follow a "noun" or "nounAdjective" pattern.

Examples:

```
defaultAccount
domesticPaymentAllowed
```

### API Versioning

It is important to present API version of the endpoint, which is used in WebAPI in user call. If an endpoint is marked to use certain version of API then please use the given version when calling the given endpoint. If no version is used in request call, then the most current version of API is used.


# Basic Data Types

The individual call descriptions below reuse the following common data types. If a datatype has a maximum length, the length is appended to the datatype, e.g. (TEXT100). If a field has a minimum and a maximum, both values are given and separated via a minus, e.g. (TEXT6-32).

If data types (see below) define error codes, those have to be returned whenever an object using such a field is POSTed or PUTed. In addition, the following generic errors can occur:

### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | FIELD\_MISSING | The mandatory field is missing in the JSON input or value is empty. |
| 400 | FIELD\_INVALID | The value of the field is not valid. |
| 400 | FIELD\_TOO\_LONG | The field maximum length has been exceeded. |
| 400 | FIELD\_TOO\_SHORT | The field minimum length has not been reached. |

If one check fails, a HTTP 403 plus an error object is returned, with the `scope` defining the source/field of the error.

## Text (TEXT)

Text is given in UTF-8 encoding. All text fields and types derived from TEXT are validated against set of allowed characters:

```
"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz áßäčďéěíĺľňóöôřŕšťúůüýžÁÄČĎÉĚÍĹĽŇÓÖÔŘŔŠŤÚŮÜÝŽ,.;:!?@&+-*/()_#"
```

In the case there is any exception in this validation rule it will be noted.

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | TEXT\_INVALID | Not a string. |
| 400 | CZ-FIELD\_CHARACTER\_NOT\_PERMITTED | The value specified contains forbidden character. |

## HTML-Fragment (HTML)

Text with HTML tags for formatting.

## Integer (INTEGER)

Integers are variable-length numbers (positive or negative). They do not have an upper size limit (like 32 or 64 bit).

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | INTEGER\_INVALID | Not an integer (float, ...). |

## Number (NUMBER)

Number is in format based on JSON number specification. Number can be positive or negative, integer or decimal.

Example: (NUMBER4)

```
{
    "institute": 188
}
```

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | NUMBER\_INVALID | Not a string only consisting of digits. Not the correct length. |

## Boolean (BOOLEAN)

Logical data type with two values: **true** or **false**.

## Universally unique identifier (UUID)

A 36-digit string containing a standard [universally unique identifier][UUID-Wikipedia].

```
"uuid": "550e8400-e29b-41d4-a716-446655440000"
```

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | UUID\_INVALID | Not a correct uuid string. |

## Currency (CURRENCY)

Currency is in **ISO 4217** format (3 capital letters code).

Example:

```
{
    "currency":"EUR"
}
```

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CURRENCY\_UNKNOWN | Not an ISO 4217 currency. |

## Country Code (COUNTRYCODE)

Country codes are in **ISO 3166-1** format, subtype ALPHA-2. This means two letters in uppercase.

Example:

```
{
    "country":"AT"
}
```

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | COUNTRY\_CODE\_UNKNOWN | Not an ISO 3166 country code. |

## Hashes (HASH)

All hashes are generated as **SHA256**.

## Amount (AMOUNT)

Amounts are objects that include the value, the precision and the currency. 

When AMOUNT is used as input value, maximum expected precision depends on currency.

| Currency | Max. precision |
| ------ | ------ |
| JPY | 0 |
| TND | 3 |
| default | 2 |

If other restriction is used for given resource it would be stated in it's description.

| Attribute | Type | Description |
| ------ | ------ | ------ |
| value | NUMBER | Value of an amount. Number without decimal part. |
| precision | NUMBER | Precision of the amount. How many digits from value fields should be considered to be decimal. |
| currency | CURRENCY | Currency of the amount. |

Example: 

```
"amountExample" : {
    "value":12345678900,
    "precision":2,
    "currency":"EUR"
}
```

Also, "currency" has to be checked according to (CURRENCY) rules.

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | INVALID\_PRECISION | Precision not an integer or not in allowed range. |

## Date (DATE)

Date format without time (yyyy-MM-dd).

```
{
    "aDate":"2011-07-14"
}
```

## Date and time (DATETIME)

Dates are returned as **ISO 8601** dates and are used for both dates, times and timestamps. Using timezones is mandatory.

```
{
    "aDate":"2011-07-14T19:43:37+0100",
    "yetAnotherDate":"2001-10-26T19:32:52Z"
}
```

All dates returned by the API are in the corresponding time zone a record/data object is for. For Czech dates (e.g. transfer timestamps) this means Central European Standard Time (CEST). Czech republic is UTC+1 in winter and UTC+2 in summer, so times usually read `+0100` or `+0200`. Should, at a later time, the API be applied to other countries, the corresponding time zone for a given data object has to be used.

**Note:** *Returning dates as UTC is discouraged because a client would not know what the intended target time zone is that a date has to be displayed in (e.g. a Czech transaction still has to be shown with the correct Czech execution time, even if the caller is using the API from e.g. the USA.)*

All dates provided by the client (e.g. a date for a future payment order) can be in any timezone. They will be converted to CEST on the server and this CEST version is used for all further processing - including storing or returning this now converted date to the client.

## Enum (ENUM)

Variables where the actual value is one of a predefined list (a.k.a. enums). The range of values are given as comma-separated list right in the datatype definition, e.g. (ENUM:GI,WP,SP,KA). Domain values are keys used in sIT's internal Domain Database, that provides company-wide reusable keys, short- and longtexts for them.

```
"some_domain_value":"SP"
```

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ENUM\_UNKNOWN | Given element is not part of this (ENUM). |

## Flag (FLAG)

Flags/Tags/Roles that an object can have. To avoid adding a lot of case-specific boolean values, things that an object is nor not is are represented by flagging the object. Flags are an array of strings representing one aspect, e.g. one permission, one attribute or one role. The existence of a certain string in a Flag-List can be considered to be a "true" on this aspect, the absence of a certain string as a "false". The possible flags are listed on a case-by-case basis at each data type/call as comma-separated list within the brackets.

```
"flags": [
    "hidden", "transactionsHidden"
]
```

Empty flag arrays can be omitted.

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | FLAG\_UNKNOWN | Given element is not possible/allowed as (FLAG). |

## International bank account numbers (IBAN)

Based on **ISO 13616-1:2007**. A valid IBAN consists of all three of the following components: 

* Country Code (2 capital letters)
* Check digits (2 digits)
* BBAN (local Basic Bank Account Number consisting of 1-30 characters)

```
"iban": "CZ172099900000005603"
```

## Business Identifier Code (BIC)

BIC code (also know as SWIFT ID/code) standard format (based on **ISO 9362**) has 8 or 11 characters, made up of:

* 4 letters: Institution Code or bank code
* 2 letters: ISO 3166-1 alpha-2 country code
* 2 letters or digits: location code
* 3 letters or digits: branch code, optional (possible default 'XXX' for primary office)

Example:

```
"bic": "GIBACZPX"
```

### Checks & Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | BIC\_INVALID | The given BIC is not syntactically correct. |

## Bank Code (BANKCODE)

Local bank code used in local bank clearing system, e.g. 5-digit bank code in AT, 4-digit bank code in CZ, SK.

```
"bankCode": "20111"     //Erste Bank der oesterreichischen Sparkassen AG
"bankCode": "0800"      //Česká spořitelna, a.s.
"bankCode": "0900"      //Slovenská sporiteľňa, a.s.
```

## Account Number (ACCOUNTNO)

Account number comes in two flavors 
* IBAN (IBAN plus optional BIC) identification
* local account number (BBAN) plus mandatory bank code plus optional country code (in case iban is available along with the local account number optional fields cz-iban and cz-bic are provided)

This is due to fact, that using of IBAN format was not adopted in all the Erste group countries. Some applications of ACCOUNTNO are restricted to one of the two flavors only. F.i. when posting new SEPA payment orders sender and receiver accounts must be specified by IBAN format only, or when posting new Domestic payment in CSAS BBAN format should be used. However when requesting existing transactions the receiver account may be returned in format BBAN or IBAN (for SEPA payments). Therefore the ACCOUNTNO object may in some cases only contain IBAN, only local BBAN, or both.

IBAN version:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| iban | IBAN | IBAN |
| bic | BIC | BIC |

BBAN version:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| number | TEXT | Account number with possible prefix. Format is "XXXXXX-NNNNNNNNNN" if prefix is not null or "000000". If prefix is not provided then format is "NNNNNNNNNN" without leading zeros. |
| bankCode | BANKCODE | Bank Code |
| countryCode | COUNTRYCODE | Code of the Country - 2 characters; mandatoryfor international orders. |
| cz-iban | IBAN | IBAN (field used only for output) |
| cz-bic | BIC | BIC (field used only for output) |

Account attribute `number` is not padded with zeros. On the other hand `bankCode` is. Account attribute `number` in consists of optional account prefix (TEXT6) and account number (TEXT10) and format is "XXXXXX-NNNNNNNNNN" if prefix is not null or "000000". If prefix is not provided then format is "NNNNNNNNNN" without leading zeros.

## Address (ADDRESS)

Description of **address** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| street | TEXT | Street of the address. |
| buildingApartment | TEXT | Number which is unique in locality/town/village. |
| streetNumber | TEXT | Number which is unique in street. Not all localities have streets. |
| city | TEXT | City. |
| zipCode | TEXT | Zip code of the address. |
| country | COUNTRYCODE | Address country. |
| description | TEXT | More detailed description of address, company name or department. |

## Base64 File (BASE64FILE)

Represents a binary file with the (base64) encoded content and content type.

```
{
    "contentBase64": (XS:base64Binary), // Encoded file content (base64Binary is defined in XML Schema)
    "contentType": (TEXT)              // MIME type, e.g., "image/png", "image/gif"
}
```

## Sign Info (SIGNINFO)

Represents signing information for the requested order.

```
{
    "state": (ENUM:OPEN,NONE), // OPEN: Order should be signed. NONE: Order has been executed without signing.
    "signId": (STAMP24ID)      // Available when state is OPEN. Used for next signing calls.
}
```

## Database Stamp Id (STAMPID)

Represents a (TEXT36) id.

```
eg:  db1fa43e-07f6-8240-8330-ed20c8307240
```

## Id (ID)

Holds an id from a created entity.

```
{
    id: (STAMPID)
}
```

## Email (EMAIL)

Represents an email.

```
{
    "emailExample": "john.doe@test.com"
}
```

## Array (ARRAY)

Represents a collection of elements/items.

Example:

```
{
    "field",
    "arrayName": [
        { ...item... },
        { ...item... },
        { ...item... }
    ],
    "field"
}
```

## Contact Address (CONTACTADDRESS)

**Contact address** is entity which inherits all fields from ADDRESS entity. In addition there are these fields:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| type | ENUM | Address type. ENUM values: PERMANENT\_RESIDENCE, SECONDARY\_RESIDENCE, COMPANY\_RESIDENCE, UNKNOWN |
| typeI18N | TEXT | Localized name of address type. |

## Contact Phone (CONTACTPHONE)

Description of **contact phone** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| type | ENUM | Phone type. ENUM: PRIVATE, COMPANY, UNKNOWN |
| typeI18N | TEXT | Localized name of phone type. |
| countryCallingCode | TEXT | Country calling code as international phone number prefix. E.g.: "0043" or "+43", "00420" or "+420", "00421" or "+421" |
| phoneNumber | TEXT | Phone number |

## Phone Number (PHONENUMBER)

Phone number in czech format consists of 9 digits without spaces and without leading zero.

Example:

```
{
    "phoneNumber": "777952341",
}
```

# Data Types

## Account

Description of **account** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | unique product id |
| accountno | ACCOUNTNO | Account number of this account. |
| alias | TEXT | User defined account name. Max. 50 characters. |
| description | TEXT | Account description. Currently account owner name is returned. |
| balance | AMOUNT | Actual account balance. For loans this field contains outstanding principal. |
| disposable | AMOUNT | Disposable account balance. |
| type | ENUM | Product type. Possible values are CURRENT (for current accounts), SAVING (for saving accounts), LOAN (for loans) |
| subtype | ENUM | Subtype product. Possible values are mapping based on type. For CURRENT (`CURRENT_ACCOUNT`, `INVESTMENT_CURRENT_ACCOUNT`, `GIRO_ACCOUNT`, `GIRO_ACCOUNT_OLD`, `FOREIGN_ACCOUNT`, `INVESTMENT_FOREIGN_ACCOUNT`), SAVING (`DEPOSIT_ACCOUNT`, `SAVING_ACCOUNT`, `SAVING_INTERNET`, `CHILDREN_PASSBOOK`, `SAVING_CS`, `BENEFIT_INVEST`), LOAN (`LOAN_ACCOUNT`, `MORTGAGE`, `REVOLVING_LOAN`). |
| productI18N | TEXT | Product description localized. |
| product | TEXT | Product code. |
| overdraft.value | NUMBER | Exists only for current accounts. |
| overdraft.precision | TEXT | Overdraft precision. |
| overdraft.currency | TEXT | Overdraft currency. |
| overdraftDueDate | DATE | Due date of overdraft. Only for overdrafts where automatic prolongation is not set. |
| flags | ARRAY | Array of flags. |
| subaccounts.id | TEXT | Subaccount identifier. Currently only saving account linked to current account is returned. |
| subaccounts.accountno | ACCOUNTNO | Subaccount account number. |
| subaccounts.type | ENUM | Type of the subaccount product. Possible values are CURRENT, SAVING, LOAN. |
| subaccounts.subtype | ENUM | Subtype product. Possible values are mapping based on type. For CURRENT (`CURRENT_ACCOUNT`, `INVESTMENT_CURRENT_ACCOUNT`, `GIRO_ACCOUNT`, `GIRO_ACCOUNT_OLD`, `FOREIGN_ACCOUNT`, `INVESTMENT_FOREIGN_ACCOUNT`), SAVING (`DEPOSIT_ACCOUNT`, `SAVING_ACCOUNT`, `SAVING_INTERNET`, `CHILDREN_PASSBOOK`, `SAVING_CS`, `BENEFIT_INVEST`), LOAN (`LOAN_ACCOUNT`, `MORTGAGE`, `REVOLVING_LOAN`). |
| subaccounts.product | TEXT | Subaccount product code. |
| subaccounts.productI18N | TEXT | Localized subaccount product code. |
| subaccounts.balance | AMOUNT | Subaccount balance. |
| subaccounts.creditInterestRate | NUMBER | Basic interest rate for subaccount. Value in percentage, e.g. 0,5 will be displayed as 0,5 %. |
| subaccounts.cz-interestRateOverLimit | NUMBER | In case of interest rate bands this is the interest rate which applies to value over limit. |
| subaccounts.cz-interestRateLimit | AMOUNT | Limit amount for basic credit interest rate used for some saving accounts. |
| creditInterestRate | NUMBER | Basic credit Interest rate, used for Current and Saving account. Value in percentage, e.g. 0,5 will be displayed as 0,5 %. |
| debitInterestRate | NUMBER | Basic debit Interest rate, used for Loan and Mortgage account. Value in percentage, e.g. 11,5 will be displayed as 11,5 %. |
| penaltyInterestRate | NUMBER | For loans (not mortgages) this is interest rate which apply when repayment is delayed. Value in percentage, e.g. 19,5 will be displayed as 19,5 %. |
| loan.interestRateToDate | DATE | For mortgages this is the date of interest rate validity. |
| loan.loanAmount | AMOUNT | For loans this is contracted value of the loan. |
| loan.maturityDate | DATE | For mortgages this is its maturity date. |
| loan.remainingLoanAmount | AMOUNT | For loans this is remaining amount for utilization. Basically this is disposable balance for loans. |
| loan.drawdownToDate | DATE | For loans and morgages this is last date when you can use money. |
| loan.drawdownAmount | AMOUNT | For mortgages this is actual drawdown amount. |
| loan.outstandingDebt | AMOUNT | For loans and mortgages this is value of the principal. Value which should be paid back to bank. |
| loan.cz-lumpsumRepayment | AMOUNT | Amount of money to onetime repay whole loan. |
| loan.installmentFrequency | ENUM | Frequency of the repayment. Possible values are MONTHLY, QUARTERLY, HALFYEARLY, YEARLY, WEEKLY. |
| loan.installmentDay | NUMBER | Day of the month when repayment should be paid (f.e. 22) |
| loan.nextRateAmount | AMOUNT | Loans and mortgages repayment amount. |
| loan.nextRateDate | DATE | Next date of the repayment (for loans). |
| saving.interestRateOverLimit | NUMBER | In case of interest rate bands this is the interest rate which applies to value over limit. |
| saving.interestRateLimit | AMOUNT | Limit amount for basic credit interest rate used for some saving accounts. |
| saving.cz-bonusInterestRate | NUMBER | Bonus interest rates which can be gained if certain conditions are met. |
| saving.savingGoal | ENUM | Saving purpose code (for some savings accounts). Possible values are ELECTRONICS, WHITE_GOODS, HOLIDAYS, SPORT_EQUIPMENT, FURNITURE, CARS_AND_ACCESSORIES, HOBBIES_AND_GARDEN, GIFTS_AND_PARTIES, HEALTH, STUDIES, HOUSING, PERSONAL. |
| saving.targetAmount | AMOUNT | For some savings accounts this is target amount of the saving. |
| saving.minimumBalance | AMOUNT | Minimum balance for some current and savings accounts. |
| saving.ownTransferMaximum | AMOUNT | Maximum amount of own transfer. Provided only for products with additional limitations. |
| saving.nextProlongation | DATE | The next prolongation date, when BE system will automatically credit regular deposit amount on saving account or calculate and transfer interest on term deposit. |
| saving.extraSavingMaximum | AMOUNT | Maximum amount of own transfer from current (master) to saving account (slave, this) used only for some saving accounts. Currently used only for Individualní spoření. Field contains maximum amount for current month (maximum for month minus already executed payments in current month). |
| saving.cz-extraSavingMaximumMonthly | AMOUNT | Maximum amount of own transfer from current (master) to saving account (slave, this) used only for some saving accounts. Currently used only for Individualni sporeni. Field contains maximum possible amount for all months (regardless already created payments). |
| ownTransferReceivers.id | TEXT | Identifier of the account which is allowed as a transfer receiver. If id is specified then you can find it among other accounts in GET /netbanking/my/accounts response. |
| ownTransferReceivers.accountno | ACCOUNTNO | Account number which is allowed as a transfer receiver. |

Possible flags:

| Flag | Description |
| ------ | ------ |
| accountQueryAllowed | User may see the transaction list for this account. |
| ownTransferAllowed | Account may be used for transfer between own accounts. |
| domesticTransferAllowed | Account may be used for domestic payments. |
| collectiveSigning | Indicates if orders sended from this account have to be signed by at least two users. |
| internationalTransferAllowed | Account may be used for foreign payments. |
| urgentTransferAllowed | Account may be used for urgent transfers. |
| offline | Account is offline (no transactions can be requested), but still visible to the user. e.g. account is currently closing. |
| owner | Current user is owner of the account. |
| dcsAllowed | Account is enabled for "Data Carrier Service". |
| electronicStatementAllowed | User may see the electronic statements list and download statement for this account. |
| directDebitAllowed | Direct debits are allowed for this account. You can call /netbanking/cz/my/accounts/{id}/directdebits resources for this account. You can setup direct debit with type DIRECT_DEBIT. |
| sipoDirectDebitAllowed | Direct debits are allowed for this account. You can call /netbanking/cz/my/accounts/{id}/directdebits resources for this account. You can setup direct debit with type SIPO. |
| standingOrderNotAllowed | Standing orders are not allowed for this account. It is not possilbe to call /netbanking/my/accounts/{id}/standingorders resources for accounts without this flag. |
| savingTargetsAllowed | Saving targets are allowed for this account. You can call /netbanking/cz/my/accounts/{id}/savingTargets resources for this account.. |

## Account Balance

Description of **account balance** entity attributes:

| Attribute | Type | Description |
| ------ | ------- | ------ |
| balance | AMOUNT | Account balance for Current, Saved amount for Saving, Principal Outstanding for Loan/Mortgage. |
| disposable | AMOUNT | Disposable balance for Current account. |
| overdraft | AMOUNT | Overdraft amount for Current account. |

## Account Transfer

Description of **account transfer** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| type | ENUM | Type of the transfer. Possible values are REVOLVING_LOAN_DISBURSEMENT, REVOLVING_LOAN_REIMBURSEMENT. |
| transferDate | DATE | Payment transfer date. |
| recipientNote | TEXT | Note for the recipient. |
| amount | AMOUNT | Amount which should be transfered. |
| account | ACCOUNTNO | Credit account for the disbursement, debit account for the reimbursement. |

## Building Saving

Description of **building saving** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | Building saving identifier. |
| accountno | ACCOUNTNO | Building saving account number. |
| alias | TEXT | User-specific alias of the contract. Max. 50 characters. |
| type | ENUM | Type of the account. Possible values are BUILD\_SAVING and BUILD\_LOAN. |
| product | TEXT | Product code. |
| productI18N | TEXT | Product name. |
| balance | AMOUNT | Building savings account balance. For loans outstanding debt is served. |
| status | ENUM | Status of the contract. Possible values are ACTIVE and CLOSED. |
| contractHolders | ARRAY | Debtor. Will only by set for loans. |
| creditInterestRate | NUMBER | Basic credit interest rate, used for building saving deposits. Value in percentage, e.g. 1,5 will be displayed as 1,5%. |
| debitInterestRate | NUMBER | Basic debit interest rate, used for building loan. Value in percentage, e.g. 9,5 will be displayed as 9,5%. |
| saving.targetAmount | AMOUNT | Target amount. Will not be set for loans. |
| saving.agreedMonthlySavings | AMOUNT | Agreed monthly savings amount for building savings. Will not be set for loans. |
| saving.expiryDate | DATETIME | Notice period expiry date. Not set for loans. |
| saving.bonusBearingDepositToPay | AMOUNT | Remaining deposit to be paid to Building Savings till the end of this year to get annual maximal bonus. |
| loan.loanAmount | AMOUNT | Total contracted building loan amount. |
| loan.loanInstallment | AMOUNT | Installment part of the loan monthly repayment. |
| loan.additionalSavings | AMOUNT | Saving part of the loan monthly repayment. |
| loan.paymentInsurance | AMOUNT | Insurance part of the loan monthly repayment. |
| loan.interestRateFromDate | DATE | Current interest rate is valid from this date. Filled only for loans. |
| loan.interestRateToDate | DATE | Current interest rate is valid to this date. Filled only for loans in case of variable interest rate. If interest rate is fixed, this field is empty. |
| flags | ARRAY | List of flags. |

Possible flags:

| Flags | Description |
| ------ | ------ |
| notRequestedBonus | Indication whether subsidy request was made. Relevant only for savings. |
| accountQueryAllowed | User may see the transaction list for this product. |

## Card

Description of **card** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | unique product id |
| alias | TEXT | Users product name. Max. 50 characters. |
| owner | TEXT | product owner |
| number | TEXT | card number |
| sequenceNumber | TEXT | Card sequence number. The number distinguishing between separate cards (different plastic cards) with the same Primary Account Number (PAN) |
| productI18N | TEXT | Localized product name. |
| productCode | TEXT | Internal product code. |
| expiryDate | DATE | Expiration date of particular plastic card |
| validFromDate | DATE | Date from which this particular plastic card is valid |
| state | ENUM | Current state of card. Possible values: ACTIVE, INACTIVE (issued card not activated yet), TEMPORARY_BLOCKED. |
| type | ENUM | Type of card: credit, debit/bankcard. Possible Values: BANK_CARD (used for debit card too), CREDIT |
| provider | ENUM | Credit card provider/issuer: Erste Bank or external bank. Possible Values: ERSTE_BANK, EXTERNAL |
| brand | ENUM | Card issuing assiciation. Possible values: VISA, MASTERCARD |
| lockReason | ENUM | Indicates reason for locking the card. Possible Values: THEFT, LOSS, FRAUD, OTHER |
| characteristic | ENUM | Card characteristics. Possible values: MAIN, AUTHORIZED |
| balance | AMOUNT | Available balance of credit card (disposable balance of shadow account). Not available for all cards or states (debit cards, locked, closed, unknown). |
| limit | AMOUNT | For credit card: Loan limit for card (shadow) account. |
| outstandingAmount | AMOUNT | Total outstanding/owed amount for credit card (the last known value). |
| minimalMonthlyAmount | AMOUNT | Minimal installment repayment amount for credit card (at previous cycle end date). |
| installmentDueDate | DATE | Installment repayment due date. |
| mainAccount.id | TEXT | Internal ID as reference for account provided by BE |
| mainAccount.accountno | ACCOUNTNO | Main account is credit card shadow account for credit card or linked main current account for bank/debit card. |
| mainAccount.holderName | TEXT | Full name of the main account's holder. |
| cz-overallCardAccountLimits.limitATM | AMOUNT | Daily ATM limit on credit line. Daily ATM limit for all credit cards issued to mainAccount |
| cz-overallCardAccountLimits.limitPOS | AMOUNT | Daily POS limit on credit line. Daily POS limit for all credit cards issued to mainAccount |
| cardDeliveryMode | TEXT | Indicates how a client receives their card and pin. Possible values: BRANCH, HOME, OTHER_BRANCH, ADDRESS_ABROAD |
| imageDataType.imageId | TEXT | Identification of the image with card design. |
| imageDataType.blackBackground | BOOLEAN | Indicates whether design image should be displayed on black/dark background. |
| features | ARRAY | Array of optional features valid for given card. |
| flags | ARRAY | Array of optional Flag values depends on Card type. |

Possible features:

| Feature | Description |
| ------ | ------ |
| contactless | Indicates whether contactless technology is available for this card. |
| secureOnlineShopping | Indicates whether secure online shopping is available for this card. |
| reissuePin | Indicates whether reissuing a PIN is possible. |
| limitChange | Indicates that card limits could be changed for this card. |
| temporaryLimitChange | Indicates that card temporary limits could be changed for this card. |
| onlineLocking | Indicates whether a card can be locked online. |
| cardDelivery | Indicates whether card delivery mode could be changed for this card. |
| replacementCard | Indicates that a replacement card could be ordered for this (bank) card. |
| automaticReplacement | Indicates that a card supports automatic replacement. Doesn't mean it is activated. |
| onlineUnlocking | Indicates whether a card can be unlocked online. |

Possible flags:

| Flag | Description |
| ------ | ------ |
| notAccountOwner | User is only holder of the card not owner of mainAccount. |
| contactlessEnabled | Indicates whether contactless functionality is active for given card. |
| secureOnlineShoppingEnabled | Indicates that 3D secure online shopping functionality is active for this card. |
| automaticReplacementOn | Indicates whether automatic card replacement is active for given card. |
| automaticReplacementChangeNotAllowed | Indicates whether automatic card replacement setting can be changed by current user in current time. |
| activationAllowed | Indicates that card can be activated. |
| electronicStatementAllowed | User may see the electronic statements list and download statement for credit card (shadow account). |
| displayPinAllowed | Indicates whether the client has the opportunity to display PIN of this card. |

## Editable Transaction

Object contains fields of the transaction which are editable by client.
Description of **editable transaction** entity attributes:

| attribute | type | description |
| ------ | ------ | ------ |
| id | TEXT | Transaction identifier. |
| note | TEXT | Personal, user specific note for transaction. Max. 4 000 characters. |
| flags | ARRAY | List of flags. |

Possible flags:

| Flag | Description |
| ------ | ------ |
| hasStar | Indication that transaction is marked as important for client. |
| hasNote | Not editable flag. But if note is saved/deleted then this flag would appear/disappear. |

## Insurance

Description of **insurance** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | Contract number. |
| type | ENUM | Product Type of insurance. ENUM values: LIFE (CSAS supports only this value) |
| product | TEXT | Code of the sVersicherung product. |
| productI18N | TEXT | Name of the sVersicherung product (localised). |
| alias | TEXT | User-specific alias of the contract. Max. 50 characters. |
| insurancePolicyHolder | TEXT | The primary holder of the specific insurance contract. |
| policyNumber | TEXT | Policy number |
| status | ENUM | ENUM: ACTIVE, CLOSED |
| life.premiumPaymentInterval | ENUM | Payment Interval. ENUM: ONCE, MONTHLY, QUARTERLY, HALFYEARLY, YEARLY, UNKNOWN |
| life.premium | AMOUNT | The agreed premium for the specific insurance. |
| life.contractEndDate | DATE | The agreed end dates of the insurance contract. |
| life.contractStartDate | DATE | The contract start date. |
| life.insuredAmount | AMOUNT | The agreed amount insured or risk covered by the insurance. |
| life.currentCapitalValue | AMOUNT | Capital value of the insurance. Amount of money in saving part of the insurance. |

## Insurance Detail Extended

Description of **insurance detail extended** entity attributes.
This entity contains all of **insurance** entity attributs (see [Insurance](#introduction/data-types/insurance).) and these additional:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| life.contractTerminationDate | DATE | Date of possible contract termination |
| life.contractTerminationReason | TEXT | Reason of possible contract termination |
| life.cz-contractEndReason | TEXT | In case of CLOSED contract, this means the reason of the termination. This field si localized. |
| life.premiumPaymentMethodI18N | TEXT | Technique for the premium payment |
| life.premiumLastPaid | DATE | Date of the last premium payment |
| life.technicalInterestRate | NUMBER | Technical interest rate. Value in percentage, e.g. 0,5 will be displayed as 0,5 %. |
| life.employerBenefit.frequency | ENUM | frequency of the contribution. ENUM: ONCE, MONTHLY, QUARTERLY, HALFYEARLY, YEARLY, UNKNOWN |
| life.employerBenefit.type | ENUM | Explanatory text to employer contribution. Possible values: WHOLE_PREMIUM, PARTLY_PAID_PREMIUM, EXTRAORDINARY_PAYMENTS? |
| life.employerBenefit.amount | AMOUNT |Amount of the contribution  |
| life.immobilization.contractNumber | TEXT | Immobilization secures the loan agreement with this contract number |
| life.immobilization.partner | TEXT | immobilization partner - third party name |
| life.paymentTemplate.type | ENUM | Type of payment template. Possible values - ORDINARY, EXTRAORDINARY |
| life.paymentTemplate.symbols.variableSymbol | TEXT | Variable symbol |
| life.paymentTemplate.receiver | ACCOUNTNO | Receiver account number |
| life.cz-capitalValueMaxWithdrawal | AMOUNT | Maximum amount that can be withdrawn from capital value |
| life.flags | ARRAY | Array of flags for life insurance extended detail |

Possible flags:

| Flag | Description |
| ------ | ------ |
| contractTermination | Flag whether there is a risk of the contract termination |
| capitalValueWithdrawalEnabled | Flag indicates that the client did not disable capital value withdrawal. [DEPRECATED - use capitalValueWithdrawalDisabled instead] |
| capitalValueWithdrawalAllowed | Flag indicates that it is possible to withdraw capital value. |
| capitalValueWithdrawalDisabled | Flag indicates that the client disabled capital value withdrawal. |

## Profile

Description of **profile** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| firstname | TEXT | user's first name |
| lastname | TEXT | user's last name |
| salutation | TEXT | user's name used for salutation |
| customerId | TEXT | cluid |
| instituteId | NUMBER | number of institute |
| marketingInfoAcceptance | ENUM | Has the customer approved §107 telecommunication act. Possible values: ACCEPTED, NOT_ACCEPTED, UNKNOWN. |
| gender | ENUM | user's gender. Possible values: MALE, FEMALE, UNKNOWN. |
| lastlogin | DATETIME | Date and time of the last login of customer. Common last login for all client applications - George, QC, etc. |

**Note:** *lastlogin field is exception in camel case usage.*

## Profile Login Info

Description of **profile login info** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| lastlogin.channel | TEXT | Channel of the last login. |
| lastlogin.lastlogin | DATETIME | Date of the last login. |

**Note:** *lastlogin field is exception in camel case usage. Even plural form of the field name is not used for array in this case.*

## Securities Account

Description of **securities account** entity attributes:

| Attribute | Type | Description |
| ------ | ------ | ------ |
| id | TEXT | Product id |
| accountno | TEXT | Account identification number of security portfolio (MUIN) |
| alias | TEXT | Alias for security portfolio. Max. 50 characters. |
| description | TEXT | Description - Securities portfolio Account name, Name of principal account holder |
| balance | AMOUNT | Account balance value |
| subSecAccounts | ARRAY | Array of securities sub accounts |
| subSecAccounts.id | TEXT | Sub Securities Account ID |
| subSecAccounts.titles | ARRAY | Array of the titles within sub account. |
| subSecAccounts.titles.title | TEXT | Name of the security title. |
| subSecAccounts.titles.isin | TEXT | ISIN - identifier of the security title. |
| subSecAccounts.titles.numberOfShares | NUMBER | Number of securities/shares  |
| subSecAccounts.titles.lastPrice | AMOUNT | Last Price of Securities title |
| subSecAccounts.titles.lastPriceDate | DATETIME | Date of securities last price evaluation |
| subSecAccounts.titles.marketValue | AMOUNT | Market value of the securities title. |
| subSecAccounts.titles.securityType | ENUM | Security Product Type. Possible values: BOND, SHARE, FUND, IPO, OPTION, OTHER, INDEX, CERTIFICATE, INVESTMENT,KNOCKOUT, UNKNOWN. |
| subSecAccounts.titles.productGroup | ENUM | Security Product Group. Possible values: BONDS_AND_MORE, GUARANTEE_OF_PRINCIPAL, NO_GUARANTEE_OF_PRINCIPAL, REAL_ESTATE, SHARES, STOCK_AND_MIXED, INVESTMENT, KNOCK_OUT, UNKNOWN. |
| subSecAccounts.titles.securityIndication | TEXT | Localized security indication depending on security type and product group |
| flags | ARRAY | Array of flags. |

Possible flags:

| Flag | Description |
| ------ | ------ |
| accountQueryAllowed | User may see the transaction list for this product. |

# Notations 

For resource calls which use older syntax there is table present which specify if attribute is mandatory, optional or not applicable.

* "m" - mandatory
* "o" - optional
* "-" - not applicable

# Group Accounts

## General [/v3/netbanking/my/accounts{?size,page,sort,order,type}] 

### Accounts List [GET]

Get a list of bank products of type account this user owns. It means current accounts, saving accounts and loans. It is possible to filter for certain product by using the type URI parameter.

For **account** entity description see [Account](#introduction/data-types/account) in Data Types section.

* Paginated &#10004;

* Sortable &#10004;

    * Fields: iban, disposable, balance

* Signable &#10006;

#### Response Fields

| Attribute | General | Current Accounts | Saving Accounts | Loans (subtype MORTGAGE) | Loans (other subtypes) |
| ------ | ------ | ------ | ------ | ------ | ------ |
| pageNumber | o | o | o | o | o |
| pageCount | o | o | o | o | o |
| pageSize | o | o | o | o | o |
| nextPage | o | o | o | o | o |
| accounts | o | o | o | o | o | 
| accounts.id | m | m | m | m | m |
| accounts.accountno | m | m | m | m | m |
| accounts.accountno.number | m | m | m | m | m |
| accounts.accountno.bankCode | m | m | m | m | m |
| accounts.accountno.countryCode | m | m | m | m | m |
| accounts.accountno.cz-iban | m | m | m | m | m |
| accounts.accountno.cz-bic | m | m | m | m | m |
| accounts.alias | o | o | o | o | o |
| accounts.description | m | m | m | m | m |
| accounts.balance | m | m | m | m | m |
| accounts.balance.value | m | m | m | m | m |
| accounts.balance.precision | m | m | m | m | m |
| accounts.balance.currency | m | m | m | m | m |
| accounts.disposable | o | m | m | - | - |
| accounts.disposable.value | m | m | m | - | - |
| accounts.disposable.precision | m | m | m | - | - |
| accounts.disposable.currency | m | m | m | - | - |
| accounts.type | m | m | m | m | m |
| accounts.subtype | m | m | m | m | m |
| accounts.productI18N | m | m | m | m | m |
| accounts.product | m | m | m | m | m |
| accounts.overdraft | o | o | - | - | - |
| accounts.overdraft.value | m | m | - | - | - |
| accounts.overdraft.precision | m | m | - | - | - |
| accounts.overdraft.currency | m | m | - | - | - |
| accounts.overdraftDueDate | o | o | - | - | - |
| accounts.flags | o | o | o | o | o |
| accounts.subaccounts | o | o | - | - | - |
| accounts.subaccounts.id | m | m | - | - | - |
| accounts.subaccounts.accountno | m | m | - | - | - |
| accounts.subaccounts.accountno.number | m | m | - | - | - |
| accounts.subaccounts.accountno.bankCode | m | m | - | - | - |
| accounts.subaccounts.accountno.countryCode | m | m | - | - | - |
| accounts.subaccounts.accountno.cz-iban | m | m | - | - | - |
| accounts.subaccounts.accountno.cz-bic | m | m | - | - | - |
| accounts.subaccounts.type | m | m | - | - | - |
| accounts.subaccounts.subtype | m | m | - | - | - |
| accounts.subaccounts.product | m | m | - | - | - |
| accounts.subaccounts.productI18N | m | m | - | - | - |
| accounts.subaccounts.balance | m | m | - | - | - |
| accounts.subaccounts.balance.value | m | m | - | - | - |
| accounts.subaccounts.balance.precision | m | m | - | - | - |
| accounts.subaccounts.balance.currency | m | m | - | - | - |
| accounts.subaccounts.creditInterestRate | m | m | - | - | - | 
| accounts.subaccounts.cz-interestRateOverLimit | o | o | - | - | - | 
| accounts.subaccounts.cz-interestRateLimit | o | o | - | - | - | 
| accounts.subaccounts.cz-interestRateLimit.value | m | m | - | - | - | 
| accounts.subaccounts.cz-interestRateLimit.precision | m | m | - | - | - | 
| accounts.subaccounts.cz-interestRateLimit.currency | m | m | - | - | - | 
| accounts.creditInterestRate | o | o | m | - | - |
| accounts.debitInterestRate | o | - | - | m | m |
| accounts.penaltyInterestRate | o | - | - | - | o |
| accounts.loan | o | - | - | o | o |
| accounts.loan.interestRateToDate | o | - | - | o | - |
| accounts.loan.loanAmount | o | - | - | o | o |
| accounts.loan.loanAmount.value | m | - | - | m | m |
| accounts.loan.loanAmount.precision | m | - | - | m | m |
| accounts.loan.loanAmount.currency | m | - | - | m | m |
| accounts.loan.maturityDate | o | - | - | o | - |
| accounts.loan.remainingLoanAmount | o | - | - | o | o |
| accounts.loan.remainingLoanAmount.value | m | - | - | m | m |
| accounts.loan.remainingLoanAmount.precision | m | - | - | m | m |
| accounts.loan.remainingLoanAmount.currency | m | - | - | m | m |
| accounts.loan.drawdownToDate | o | - | - | o | o |
| accounts.loan.drawdownAmount | o | - | - | o | - |
| accounts.loan.drawdownAmount.value | m | - | - | m | - |
| accounts.loan.drawdownAmount.precision | m | - | - | m | - |
| accounts.loan.drawdownAmount.currency | m | - | - | m | - |
| accounts.loan.outstandingDebt | o | - | - | o | o |
| accounts.loan.outstandingDebt.value | m | - | - | m | m |
| accounts.loan.outstandingDebt.precision | m | - | - | m | m |
| accounts.loan.outstandingDebt.currency | m | - | - | m | m |
| accounts.loan.cz-lumpsumRepayment | o | - | - | o | o |
| accounts.loan.cz-lumpsumRepayment.value | m | - | - | m | m |
| accounts.loan.cz-lumpsumRepayment.precision | m | - | - | m | m |
| accounts.loan.cz-lumpsumRepayment.currency | m | - | - | m | m |
| accounts.loan.installmentFrequency | o | - | - | o | o |
| accounts.loan.installmentDay | o | - | - | o | o |
| accounts.loan.nextRateAmount | o | - | - | o | o |
| accounts.loan.nextRateAmount.value | m | - | - | m | m |
| accounts.loan.nextRateAmount.precision | m | - | - | m | m |
| accounts.loan.nextRateAmount.currency | m | - | - | m | m |
| accounts.loan.nextRateDate | o | - | - | o | o |
| accounts.saving | o | - | o | - | - |
| accounts.saving.interestRateOverLimit | o | - | o | - | - |
| accounts.saving.interestRateLimit | o | - | o | - | - |
| accounts.saving.interestRateLimit.value | m | - | m | - | - |
| accounts.saving.interestRateLimit.precision | m | - | m | - | - |
| accounts.saving.interestRateLimit.currency | m | - | m | - | - |
| accounts.saving.cz-bonusInterestRate | o | - | o | - | - |
| accounts.saving.savingGoal | o | - | o | - | - |
| accounts.saving.targetAmount | o | - | o | - | - |
| accounts.saving.targetAmount.value | m | - | m | - | - |
| accounts.saving.targetAmount.precision | m | - | m | - | - |
| accounts.saving.targetAmount.currency | m | - | m | - | - |
| accounts.saving.minimumBalance | o | - | o | - | - |
| accounts.saving.minimumBalance.value | m | - | m | - | - |
| accounts.saving.minimumBalance.precision | m | - | m | - | - |
| accounts.saving.minimumBalance.currency | m | - | m | - | - |
| accounts.saving.ownTransferMaximum | o | - | o | - | - |
| accounts.saving.ownTransferMaximum.value | m | - | m | - | - |
| accounts.saving.ownTransferMaximum.precision | m | - | m | - | - |
| accounts.saving.ownTransferMaximum.currency | m | - | m | - | - |
| accounts.saving.nextProlongation | o | - | o | - | - |
| accounts.saving.extraSavingMaximum | o | - | o | - | - |
| accounts.saving.extraSavingMaximum.value | m | - | m | - | - |
| accounts.saving.extraSavingMaximum.precision | m | - | m | - | - |
| accounts.saving.extraSavingMaximum.currency | m | - | m | - | - |
| accounts.saving.cz-extraSavingMaximumMonthly | o | - | o | - | - |
| accounts.saving.cz-extraSavingMaximumMonthly.value | m | - | m | - | - |
| accounts.saving.cz-extraSavingMaximumMonthly.precision | m | - | m | - | - |
| accounts.saving.cz-extraSavingMaximumMonthly.currency | m | - | m | - | - |
| accounts.ownTransferReceivers | o | o | o | - | o |
| accounts.ownTransferReceivers.id | m | m | m | - | m |
| accounts.ownTransferReceivers.accountno | m | m | m | - | m |
| accounts.ownTransferReceivers.accountno.number | m | m | m | - | m |
| accounts.ownTransferReceivers.accountno.bankCode | m | m | m | - | m |
| accounts.ownTransferReceivers.accountno.countryCode | m | m | m | - | m |
| accounts.ownTransferReceivers.accountno.cz-iban | m | m | m | - | m |
| accounts.ownTransferReceivers.accountno.cz-bic | m | m | m | - | m |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)
    + Attributes (object)
        - accounts (array[ACCOUNT], optional) - Array of all accounts which current user has rights for.
        - Include PAGINATION
-->

+ Parameters
    + size: 100 (number, optional) - Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page: 0 (number, optional) - Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
        + Default: 0
    + sort: iban (string, optional) - Comma separated list of fields which should be used for sorting. Sort priorities are left to right.
    + order: desc (string, optional) - The optional sorting order can be either asc or desc (case insensitive), with asc as default. If sort field contains multiple fields then desc field should contain comma separated list of orders for these fields.
    + type: CURRENT (string, optional) ... An optional comma-separated list of requested product types.

+ Request

    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001
            
+ Response 200 (application/json)

    + Body
    
            {
                "pageNumber": 0,
                "pageCount": 2,
                "pageSize": 100,
                "nextPage": 1,
                "accounts": [
                    {
                        "id": "D2C8C1DCC51A3738538A40A4863CA288E0225E52",
                        "accountno": {
                            "number": "1019382023",
                            "bankCode": "0800",
                            "countryCode": "CZ",
                            "cz-iban": "CZ0708000000001019382023",
                            "cz-bic": "GIBACZPX"
                        },
                        "alias": "moj osobny ucet s kasickou",
                        "balance": {
                            "value": 8965200,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "disposable": {
                            "value": 0,
                            "precision": 2,
                            "currency": "EUR"
                        },
                        "type": "CURRENT",
                        "subtype": "CURRENT_ACCOUNT",
                        "productI18N": "Osobní účet ČS II",
                        "product": "54",
                        "overdraft": {
                            "value": 2000000,
                            "precision": 2,
                            "currency": "CZK" 
                        },
                        "overdraftDueDate": "2015-07-31",
                        "flags": [
                            "accountQueryAllowed",
                            "collectiveSigning",
                            "domesticTransferAllowed",
                            "internationalTransferAllowed",
                            "ownTransferAllowed",
                            "urgentTransferAllowed"
                        ],
                        "subaccounts": [
                            {
                                "id": "0D5F82464A77DF093858A8A5B938BEE410B4409C",
                                "accountno": {
                                    "number": "2187142023",
                                    "bankCode": "0800",
                                    "countryCode": "CZ",
                                    "cz-iban": "CZ1308000000002187142023",
                                    "cz-bic": "GIBACZPX"
                                },
                                "type": "SAVING",
                                "subtype": "SAVING_ACCOUNT",
                                "product": "52",
                                "productI18N": "Peníze stranou",                                
                                "balance": {
                                    "value": 2000000,
                                    "precision": 2,
                                    "currency": "CZK"
                                },
                                "creditInterestRate": 1.00
                            }
                        ]
                    },
                    {
                        "id": "0D64CBB8815E231A4F7C846342FAFAC5C7D7FBA0",
                        "accountno": {
                            "number": "1825498223",
                            "bankCode": "0800",
                            "countryCode": "CZ",
                            "cz-iban": "CZ2708000000001825498223",
                            "cz-bic": "GIBACZPX"
                        },
                        "alias": "moje sporenie",
                        "balance": {
                            "value": 6200000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "disposable": {
                            "value": 0,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "type": "SAVING",
                        "subtype": "SAVING_CS",
                        "productI18N": "Spoření ČS",
                        "product": "48",
                        "flags": [
                            "ownTransferAllowed"
                        ],
                        "saving": {
                            "targetAmount": {
                                "value": 10000000,
                                "precision": 2,
                                "currency": "CZK"                            
                            }   
                        }
                    },
                    {
                        "id": "86EE795A6D92D963E9AA47E092BEFA2BEEEC3239",
                        "accountno": {
                            "number": "3766862329",
                            "bankCode": "0800",
                            "countryCode": "CZ",
                            "cz-iban": "CZ6508000000003766862329",
                            "cz-bic": "GIBACZPX"
                        },
                        "alias": "moj uver",
                        "balance": {
                            "value": 8000000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "type": "LOAN",
                        "subtype": "LOAN_ACCOUNT",
                        "productI18N": "Spotřebitelský úvěr",
                        "product": "98",
                        "loan": {
                            "loanAmount": {
                                "value": 40000000,
                                "precision": 2,
                                "currency": "CZK"
                            },
                            "remainingLoanAmount": {
                                "value": 32000000,
                                "precision": 2,
                                "currency": "CZK"
                            },
                            "outstandingDebt": {
                                "value": 8000000,
                                "precision": 2,
                                "currency": "CZK"
                            },
                            "drawdownToDate": "2014-11-27",
                            "cz-lumpsumRepayment": {
                                "value": 8245100,
                                "precision": 2,
                                "currency": "CZK"
                            }
                        }
                    }
                ]
            } 

### Account Detail [GET /v3/netbanking/my/accounts/{id}]

Get a detail of bank product of type account this user owns by its identifier. It means detail of current account, saving account or loan.

For **account** entity description see [Account](#introduction/data-types/account) in Data Types section.

* Paginated &#10006;

* Sortable &#10006;

* Signable &#10006;

#### Response Fields

| Attribute | General | Current Accounts | Saving Accounts | Loans (subtype MORTGAGE) | Loans (other subtypes) |
| ------ | ------ | ------ | ------ | ------ | ------ |
| id | m | m | m | m | m |
| accountno | m | m | m | m | m |
| accountno.number | m | m | m | m | m |
| accountno.bankCode | m | m | m | m | m |
| accountno.countryCode | m | m | m | m | m |
| accountno.cz-iban | m | m | m | m | m |
| accountno.cz-bic | m | m | m | m | m |
| alias | o | o | o | o | o |
| description | m | m | m | m | m |
| balance | m | m | m | m | m |
| balance.value | m | m | m | m | m |
| balance.precision | m | m | m | m | m |
| balance.currency | m | m | m | m | m |
| disposable | o | m | m | - | - |
| disposable.value | m | m | m | - | - |
| disposable.precision | m | m | m | - | - |
| disposable.currency | m | m | m | - | - |
| type | m | m | m | m | m |
| subtype | m | m | m | m | m |
| productI18N | m | m | m | m | m |
| product | m | m | m | m | m |
| overdraft | o | o | - | - | - |
| overdraft.value | m | m | - | - | - |
| overdraft.precision | m | m | - | - | - |
| overdraft.currency | m | m | - | - | - |
| overdraftDueDate | o | o | - | - | - |
| flags | o | o | o | o | o |
| subaccounts | o | o | - | - | - |
| subaccounts.id | m | m | - | - | - |
| subaccounts.accountno | m | m | - | - | - |
| subaccounts.accountno.number | m | m | - | - | - |
| subaccounts.accountno.bankCode | m | m | - | - | - |
| subaccounts.accountno.countryCode | m | m | - | - | - |
| subaccounts.accountno.cz-iban | m | m | - | - | - |
| subaccounts.accountno.cz-bic | m | m | - | - | - |
| subaccounts.type | m | m | - | - | - |
| subaccounts.subtype | m | m | - | - | - |
| subaccounts.product | m | m | - | - | - |
| subaccounts.productI18N | m | m | - | - | - |
| subaccounts.balance | m | m | - | - | - |
| subaccounts.balance.value | m | m | - | - | - |
| subaccounts.balance.precision | m | m | - | - | - |
| subaccounts.balance.currency | m | m | - | - | - |
| subaccounts.creditInterestRate | m | m | - | - | - | 
| subaccounts.cz-interestRateOverLimit | o | o | - | - | - | 
| subaccounts.cz-interestRateLimit | o | o | - | - | - | 
| subaccounts.cz-interestRateLimit.value | m | m | - | - | - | 
| subaccounts.cz-interestRateLimit.precision | m | m | - | - | - | 
| subaccounts.cz-interestRateLimit.currency | m | m | - | - | - | 
| creditInterestRate | o | o | m | - | - |
| debitInterestRate | o | - | - | m | m |
| penaltyInterestRate | o | - | - | - | o |
| loan | o | - | - | o | o |
| loan.interestRateToDate | o | - | - | o | - |
| loan.loanAmount | o | - | - | o | o |
| loan.loanAmount.value | m | - | - | m | m |
| loan.loanAmount.precision | m | - | - | m | m |
| loan.loanAmount.currency | m | - | - | m | m |
| loan.maturityDate | o | - | - | o | - |
| loan.remainingLoanAmount | o | - | - | o | o |
| loan.remainingLoanAmount.value | m | - | - | m | m |
| loan.remainingLoanAmount.precision | m | - | - | m | m |
| loan.remainingLoanAmount.currency | m | - | - | m | m |
| loan.drawdownToDate | o | - | - | o | o |
| loan.drawdownAmount | o | - | - | o | - |
| loan.drawdownAmount.value | m | - | - | m | - |
| loan.drawdownAmount.precision | m | - | - | m | - |
| loan.drawdownAmount.currency | m | - | - | m | - |
| loan.outstandingDebt | o | - | - | o | o |
| loan.outstandingDebt.value | m | - | - | m | m |
| loan.outstandingDebt.precision | m | - | - | m | m |
| loan.outstandingDebt.currency | m | - | - | m | m |
| loan.cz-lumpsumRepayment | o | - | - | o | o |
| loan.cz-lumpsumRepayment.value | m | - | - | m | m |
| loan.cz-lumpsumRepayment.precision | m | - | - | m | m |
| loan.cz-lumpsumRepayment.currency | m | - | - | m | m |
| loan.installmentFrequency | o | - | - | o | o |
| loan.installmentDay | o | - | - | o | - |
| loan.nextRateAmount | o | - | - | o | o |
| loan.nextRateAmount.value | m | - | - | m | m |
| loan.nextRateAmount.precision | m | - | - | m | m |
| loan.nextRateAmount.currency | m | - | - | m | m |
| loan.nextRateDate | o | - | - | o | o |
| saving | o | - | o | - | - |
| saving.interestRateOverLimit | o | - | o | - | - |
| saving.interestRateLimit | o | - | o | - | - |
| saving.interestRateLimit.value | m | - | m | - | - |
| saving.interestRateLimit.precision | m | - | m | - | - |
| saving.interestRateLimit.currency | m | - | m | - | - |
| saving.cz-bonusInterestRate | o | - | o | - | - |
| saving.savingGoal | o | - | o | - | - |
| saving.targetAmount | o | - | o | - | - |
| saving.targetAmount.value | m | - | m | - | - |
| saving.targetAmount.precision | m | - | m | - | - |
| saving.targetAmount.currency | m | - | m | - | - |
| saving.minimumBalance | o | - | o | - | - |
| saving.minimumBalance.value | m | - | m | - | - |
| saving.minimumBalance.precision | m | - | m | - | - |
| saving.minimumBalance.currency | m | - | m | - | - |
| saving.ownTransferMaximum | o | - | o | - | - |
| saving.ownTransferMaximum.value | m | - | m | - | - |
| saving.ownTransferMaximum.precision | m | - | m | - | - |
| saving.ownTransferMaximum.currency | m | - | m | - | - |
| saving.nextProlongation | o | - | o | - | - |
| saving.extraSavingMaximum | o | - | o | - | - |
| saving.extraSavingMaximum.value | m | - | m | - | - |
| saving.extraSavingMaximum.precision | m | - | m | - | - |
| saving.extraSavingMaximum.currency | m | - | m | - | - |
| saving.cz-extraSavingMaximumMonthly | o | - | o | - | - |
| saving.cz-extraSavingMaximumMonthly.value | m | - | m | - | - |
| saving.cz-extraSavingMaximumMonthly.precision | m | - | m | - | - |
| saving.cz-extraSavingMaximumMonthly.currency | m | - | m | - | - |
| ownTransferReceivers | o | o | o | - | o |
| ownTransferReceivers.id | m | m | m | - | m |
| ownTransferReceivers.accountno | m | m | m | - | m |
| ownTransferReceivers.accountno.number | m | m | m | - | m |
| ownTransferReceivers.accountno.bankCode | m | m | m | - | m |
| ownTransferReceivers.accountno.countryCode | m | m | m | - | m |
| ownTransferReceivers.accountno.cz-iban | m | m | m | - | m |
| ownTransferReceivers.accountno.cz-bic | m | m | m | - | m |

Mortgage is deprecated. Instead of Mortgage is used Loan type.

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)
    + Attributes (ACCOUNT)
-->

+ Parameters

    + id: CCA4F9863D686D04 (string, required) - Account identifier.

+ Request

    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001 

+ Response 200 (application/json)

            {
                "id": "D2C8C1DCC51A3738538A40A4863CA288E0225E52",
                "accountno": {
                    "number": "1019382023",
                    "bankCode": "0800",
                    "countryCode": "CZ",
                    "cz-iban": "CZ0708000000001019382023",
                    "cz-bic": "GIBACZPX"
                },
                "alias": "moj osobny ucet s kasickou",
                "balance": {
                    "value": 8965200,
                    "precision": 2,
                    "currency": "CZK"
                },
                "disposable": {
                    "value": 0,
                    "precision": 2,
                    "currency": "EUR"
                },
                "type": "CURRENT",
                "subtype": "CURRENT_ACCOUNT",
                "productI18N": "Osobní účet ČS II",
                "product": "54",
                "overdraft": {
                    "value": 2000000,
                    "precision": 2,
                    "currency": "CZK"                    
                },
                "overdraftDueDate": "2015-07-31",
                "flags": [
                    "accountQueryAllowed",
                    "collectiveSigning",
                    "domesticTransferAllowed",
                    "internationalTransferAllowed",
                    "ownTransferAllowed",
                    "urgentTransferAllowed"
                ],
                "subaccounts": [
                    {
                        "id": "0D5F82464A77DF093858A8A5B938BEE410B4409C",
                        "accountno": {
                            "number": "2187142023",
                            "bankCode": "0800",
                            "countryCode": "CZ",
                            "cz-iban": "CZ1308000000002187142023",
                            "cz-bic": "GIBACZPX"
                        },
                        "type": "SAVING",
                        "subtype": "SAVING_ACCOUNT",
                        "product": "52",
                        "productI18N": "Peníze stranou",                                
                        "balance": {
                            "value": 2000000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "creditInterestRate": 1.00
                    }
                ]
            }

## Digest [/v3/netbanking/my/accounts/digest{?size,page,sort,order}]

### Account Numbers List [GET] 

Get a possibly empty list of all account numbers of the accounts this user owns. This version returns minimal information about each account and is usefull if a client needs to know how many accounts exist without needing the individual accounts details.

For more detailed information about accounts call *GET /netbanking/my/accounts*.

For **account number** entity description see [Account Number](#introduction/basic-data-types/account-number-(accountno\)).

* Paginated &#10004;

* Sortable &#10004;

    * Fields: iban

* Signable &#10006;

#### Response Fields

| Attribute | General |
| ------ | ------ |
| pageNumber | o |
| pageCount | o |
| pageSize | o |
| nextPage | o |
| accounts | o |
| accounts.number | m |
| accounts.bankCode | m |
| accounts.countryCode | m |
| accounts.cz-iban | m |
| accounts.cz-bic | m |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)
    + Attributes (object)
        - accounts (array[ACCOUNTNO_FULL], optional) - Array of all account numbers for accounts which current user has rights for.
        - Include PAGINATION
-->

+ Parameters
    + size: 100 (number, optional) - Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page: 0 (number, optional) - Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
        + Default: 0
    + sort: iban (string, optional) - Comma separated list of fields which should be used for sorting. Sort priorities are left to right.
    + order: desc (string, optional) - The optional sorting order can be either asc or desc (case insensitive), with asc as default. If sort field contains multiple fields then desc field should contain comma separated list of orders for these fields.

+ Request

    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001
            
+ Response 200 (application/json)

    + Body
    
            {
                "pageNumber": 0,
                "pageCount": 2,
                "pageSize": 100,
                "nextPage": 1,
                "accounts": [
                    {
                        "number": "1019382023",
                        "bankCode": "0800",
                        "countryCode": "CZ",
                        "cz-iban": "CZ0708000000001019382023",
                        "cz-bic": "GIBACZPX"
                    },
                    {
                        "number": "1825498223",
                        "bankCode": "0800",
                        "countryCode": "CZ",
                        "cz-iban": "CZ2708000000001825498223",
                        "cz-bic": "GIBACZPX"
                    },
                    {
                        "number": "3766862329",
                        "bankCode": "0800",
                        "countryCode": "CZ",
                        "cz-iban": "CZ6508000000003766862329",
                        "cz-bic": "GIBACZPX"
                    }
                ]
            } 

## Balances [/v3/netbanking/my/accounts/{id}/balance]

### Account Balance [GET]

This call returns balances for certain account identified by its id.

For **account balance** entity description see [Account Balance](#introduction/data-types/account-balance).

* Paginated &#10006;

* Sortable &#10006;

* Signable &#10006;

#### Response Fields

| Attribute | General |
| ------ | ------ |
| balance | m |
| balance.value | m |
| balance.currency | m |
| balance.precision | m |
| disposable | o |
| disposable.value | m |
| disposable.precision | m |
| disposable.currency | m |
| overdraft | o |
| overdraft.value | m |
| overdraft.precision | m |
| overdraft.currency | m |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)
    + Attributes (ACCOUNT_BALANCE)
-->

+ Parameters

    + id: D2C8C1DCC51A3738538A40A4863CA288E0225E52 (string, required) - Account identifier.

+ Request

    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)
            

            {
                "balance": {
                    "value": 45865,
                    "currency": "CZK",
                    "precision": 2
                },
                "disposable": {
                    "value": 45865,
                    "precision": 2,
                    "currency": "CZK"
                },
                "overdraft": {
                    "value": 20000,
                    "precision": 2,
                    "currency": "CZK"
                }
            }

## Account transactions history [/v3/netbanking/cz/my/accounts/{iban}/transactions{?dateStart,dateEnd}]

Description of **account transaction** entity attributes:

| attribute | type | description |
| ------ | ------ | ------ |
| id | text | transaction reference ID |
| accountParty.accountNumber | text |  account number of transaction party |
| accountParty.accountPrefix | text |  account prefix of transaction party |
| accountParty.bankCode | text |  account bank code of transaction party |
| accountParty.bic | text | id of bank/branch, constant for domestic accounts in csas |
| accountParty.iban | text |  account number of transaction party in IBAN format | 
| accountParty.partyInfo | text | name of transaction party. For ATM transaction, masked card number used in transaction | 
| accountParty.partyDescription | text | whole account number including bank of transaction party. For ATM transaction, address of ATM if known. For card transaction, identification (name) of the merchant. | 
| additionalTexts | text | additional info to transaction - not used |
| amount.value | number | value of the transaction |
| amount.precision | short | precision (constant 2) |
| amount.currency | text | currency |
| amountSender.value | number | value of the transaction - same as amount.value |
| amountSender.precision | short | precision (constant 2)  - same as amount.precision |
| amountSender.currency | text | currency |
| bookingDate | datetime | date of booking |
| bookingType | text | type of booking |
| cardNumber | number | number of card used in transaction |
| constantSymbol | text | constant symbol |
| currRateEURValue | text | conversion rates in EUR |
| currRateEURDate | datetime | date of conversion  |
| description | text | user description of the transaction |
| descriptionEditable | boolean | true=description could be changed using PUT method |
| payeeNote | text | note for payee ("zpráva pro příjemce"). Up to 140 chars. For foreign transactions, additional info about currency rate etc. |
| payerNote | text | note for payer ("zpráva pro mě"). Up to 140 chars. |
| paymentReference | text | not used |
| specificSymbol | text | specific symbol |
| state | text | transaction state |
| timestampId | text | not used |
| transactionType | text | type of transaction |
| valuationDate | datetime | date of valuation |
| variableSymbol | text | variable symbol |

### Get account transactions. [GET]

+ Parameters
    + iban: `CZ5508000000000379554193` (required, string) - account IBAN
    + dateStart: `2014-06-01T00:00:00+02:00` (required, string) - transactions from
    + dateEnd: `2014-06-30T00:00:00+02:00` (required, string) - transactions to
    
+ Request

    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)

    + Attributes (Paged Account Transactions)

## Transactions [/v3/netbanking/my/accounts/{id}/transactions]

### Add/Change Note and Mark Transaction [PUT /v3/netbanking/my/accounts/{id}/transactions/{tId}]

Allows to add or change a client's personal transaction note and mark the transaction as favorite/important for one specific transaction on selected account. The existing note will be removed, if the given payload has an empty or missing note attribute. If hasStar flag is provided in input payload, transaction is marked as favorite/important, otherwise the existing flag will be removed. Transaction note and star are assigned to particular transaction and user who created/modified this transaction info. If two users have access to the same transaction, then they can define different personal notes to the same transaction and these personal notes should be visible only to related user.

For **editable transaction** entity description see [Editable Transaction](#introduction/data-types/editable-transaction).

* Paginated &#10006;

* Sortable &#10006;

* Signable &#10004; 
    
    * currently signing is not required for any of the possible changes

#### Request Fields

| Attribute | General |
| ------ | ------ |
| id | - |
| note | o |
| flags | o |

#### Response Fields

| Attribute | General |
| ------ | ------ |
| transaction | m |
| transaction.id | m |
| transaction.note | o |
| transaction.flags | o |
| signInfo | m |
| signInfo.state | m |
| signInfo.signId | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_MISMATCH | The identifier specified in the payload does not match the identifier specified in the URI. |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist or transaction doesn't belong to given account. |


<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

    + Attributes (EDITABLE_TRANSACTION)

+ Response 200 (application/json)
    + Attributes (object)
        - transaction (EDITABLE_TRANSACTION, required) - Transaction with changes made by this call.
        - Include SIGNINFO_REQUIREMENT
-->

+ Parameters

    + id: D2C8C1DCC51A3738538A40A4863CA288E0225E52 (string, required) - Account identifier.
    + tId: 100000189114334 (string, required) - Transaction identifier.

+ Request (application/json)

    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

    + Body

            {
                "note": "New client's personal note for transaction",
                "flags": [
                    "hasStar"
                ]
            }

+ Response 200 (application/json)

        {
            "transaction": {
                "id": "100000189114334",
                "note": "New client's personal note for transaction",
                "flags": [
                    "hasNote",
                    "hasStar"
                ]
            },
            "signInfo": {
                "state": "NONE"
            }
        }


# Group Cards

## General [/v3/netbanking/my/cards{?size,page,sort,order}]

### Cards List [GET]

Resource represents list of payment cards (either debet or credit) for current user. Every card was issued for current user or belongs to one of his accounts.

For **card** entity description see [Card](#introduction/data-types/card).

* Paginated &#10004;

* Sortable &#10004;

    * Fields: id, productCode

* Signable &#10006;

#### Response Fields

| Attribute | General | Debit cards | Credit cards |
| ------ | ------ | ------ | ------ | 
| pageNumber | o | o | o |
| pageCount | o | o | o |
| pageSize | o | o | o |
| nextPage | o | o | o |
| cards | o | o | o |
| cards.id | m | m | m |
| cards.alias | o | o | o |
| cards.owner | m | m | m |
| cards.number | m | m | m |
| cards.sequenceNumber | m | m | m |
| cards.productI18N | m | m | m |
| cards.productCode | o | o | o |
| cards.expiryDate | o | o | o |
| cards.validFromDate | o | o | o |
| cards.state | m | m | m |
| cards.type | m | m | m |
| cards.provider | m | m | m |
| cards.brand | o | o | o |
| cards.lockReason | o | o | o |
| cards.characteristics | o | o | o |
| cards.limit | o | - | o |
| cards.limit.value | m | - | m |
| cards.limit.currency | m | - | m |
| cards.limit.precision | m | - | m |
| cards.balance | o | - | o |
| cards.balance.value | m | - | m |
| cards.balance.precision | m | - | m |
| cards.balance.currency | m | - | m |
| cards.outstandingAmount | o | - | o |
| cards.outstandingAmount.value | m | - | m |
| cards.outstandingAmount.precision | m | - | m |
| cards.outstandingAmount.currency | m | - | m |
| cards.minimalMonthlyAmount | o | - | o |
| cards.minimalMonthlyAmount.value | m | - | m |
| cards.minimalMonthlyAmount.precision | m | - | m |
| cards.minimalMonthlyAmount.currency | m | - | m |
| cards.installmentDueDate | o | - | o |
| cards.mainAccount | o | o | o |
| cards.mainAccount.id | o | o | o |
| cards.mainAccount.accountno | m | m | m |
| cards.mainAccount.accountno.cz-iban | m | m | m |
| cards.mainAccount.accountno.cz-bic | m | m | m |
| cards.mainAccount.accountno.number | m | m | m |
| cards.mainAccount.accountno.bankCode | m | m | m |
| cards.mainAccount.accountno.countryCode | o | o | o |
| cards.mainAccount.holderName | m | m | m |
| cards.cz-overallCardAccountLimits | o | - | o |
| cards.cz-overallCardAccountLimits.limitATM | o | - | o |
| cards.cz-overallCardAccountLimits.limitATM.value | m | - | m |
| cards.cz-overallCardAccountLimits.limitATM.precision | m | - | m |
| cards.cz-overallCardAccountLimits.limitATM.currency | m | - | m |
| cards.cz-overallCardAccountLimits.limitPOS | o | - | o |
| cards.cz-overallCardAccountLimits.limitPOS.value | m | - | m |
| cards.cz-overallCardAccountLimits.limitPOS.precision | m | - | m |
| cards.cz-overallCardAccountLimits.limitPOS.currency | m | - | m |
| cards.cardDeliveryMode | o | o | o |
| cards.imageDataType | m | m | m |
| cards.imageDataType.imageId | m | m | m |
| cards.imageDataType.blackBackground | m | m | m |
| cards.features | o | o | o |
| cards.flags | o | o | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/pdf)
    + Attributes (object)
        - cards (array[CARD], optional) - List of cards.
        - Include PAGINATION
-->

+ Parameters

    + size: 100 (number, optional) - Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page: 0 (number, optional) - Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
        + Default: 0
    + sort: id (string, optional) - Comma separated list of fields which should be used for sorting. Sort priorities are left to right.
    + order: desc (string, optional) - The optional sorting order can be either asc or desc (case insensitive), with asc as default. If sort field contains multiple fields then desc field should contain comma separated list of orders for these fields.

+ Request

    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)

            {
                "pageNumber": 0,
                "pageCount": 1,
                "pageSize": 1,
                "cards": [{
                    "id": "76FABDF10FD983EA144FF90EB3EB64AAFC67A664",
                    "owner": "ŠVANTNER MAREK",
                    "number": "451161XXXXXX6044",
                    "sequenceNumber": "4",
                    "productCode": "4511611",
                    "expiryDate": "2016-11-30",
                    "state": "ACTIVE",
                    "type": "BANK_CARD",
                    "provider": "ERSTE_BANK",
                    "brand": "MASTERCARD",
                    "validFromDate": "2013-12-01",
                    "characteristic": "MAIN",
                    "mainAccount": {
                        "id": "D81E28ADD904A6DD08956E46A3F68CEAF32C8399",
                        "holderName": "Marek Švantner",
                        "accountno": {
                            "number": "1381167123",
                            "bankCode": "0800",
                            "countryCode": "CZ",
                            "cz-iban": "CZ9708000000001381167123",
                            "cz-bic": "GIBACZPX"
                        }
                    },
                    "cardDeliveryMode": "BRANCH",
                    "flags": [
                        "automaticReplacementOn",
                        "secureOnlineShoppingEnabled",
                        "contactlessEnabled",
                        "displayPinAllowed"
                    ],
                    "features": [
                        "limitChange",
                        "reissuePin",
                        "contactless",
                        "onlineLocking",
                        "temporaryLimitChange",
                        "cardDelivery",
                        "automaticReplacement"
                    ],
                    "alias": "Moje VISA",
                    "creditCard": false,
                    "productI18N": "Visa Classic debetní - Partner",
                    "imageDataType": {
                        "imageId": "77",
                        "blacBackground": false
                    }
                }]
            }

### Card Detail [GET /v3/netbanking/my/cards/{id}]

Returns one single card given it's ID. Does not include transactions.

For **card** entity description see [Card](#introduction/data-types/card).

* Paginated &#10006;

* Sortable &#10006;

* Signable &#10006;

#### Response Fields

| Attribute | General | Debit cards | Credit cards |
| ------ | ------ | ------ | ------ |
| id | m | m | m |
| alias | o | o | o |
| owner | m | m | m |
| number | m | m | m |
| sequenceNumber | m | m | m |
| productI18N | m | m | m |
| productCode | o | o | o |
| expiryDate | o | o | o |
| validFromDate | o | o | o |
| state | m | m | m |
| type | m | m | m |
| provider | m | m | m |
| brand | o | o | o |
| lockReason | o | o | o |
| characteristics | o | o | o |
| limit | o | - | o |
| limit.value | m | - | m |
| limit.currency | m | - | m |
| limit.precision | m | - | m |
| balance | o | - | o |
| balance.value | m | - | m |
| balance.precision | m | - | m |
| balance.currency | m | - | m |
| outstandingAmount | o | - | o |
| outstandingAmount.value | m | - | m |
| outstandingAmount.precision | m | - | m |
| outstandingAmount.currency | m | - | m |
| minimalMonthlyAmount | o | - | o |
| minimalMonthlyAmount.value | m | - | m |
| minimalMonthlyAmount.precision | m | - | m |
| minimalMonthlyAmount.currency | m | - | m |
| installmentDueDate | o | - | o |
| mainAccount | o | o | o |
| mainAccount.id | o | o | o |
| mainAccount.accountno | m | m | m |
| mainAccount.accountno.cz-iban | m | m | m |
| mainAccount.accountno.cz-bic | m | m | m |
| mainAccount.accountno.number | m | m | m |
| mainAccount.accountno.bankCode | m | m | m |
| mainAccount.accountno.countryCode | o | o | m |
| mainAccount.holderName | m | m | m |
| cz-overallCardAccountLimits | o | - | o |
| cz-overallCardAccountLimits.limitATM | o | - | o |
| cz-overallCardAccountLimits.limitATM.value | m | - | m |
| cz-overallCardAccountLimits.limitATM.precision | m | - | m |
| cz-overallCardAccountLimits.limitATM.currency | m | - | m |
| cz-overallCardAccountLimits.limitPOS | o | - | o |
| cz-overallCardAccountLimits.limitPOS.value | m | - | m |
| cz-overallCardAccountLimits.limitPOS.precision | m | - | m |
| cz-overallCardAccountLimits.limitPOS.currency | m | - | m |
| cardDeliveryMode | o | o | o |
| imageDataType | m | m | m |
| imageDataType.imageId | m | m | m |
| imageDataType.blackBackground | m | m | m |
| features | o | o | o |
| flags | o | o | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/pdf)
    + Attributes (CARD)
-->

+ Parameters
    + id: `DE918715B5F8E220FF418E8185797596580C77D0` (string, required) - ID of the card.

+ Request

    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)

            {
                "id": "76FABDF10FD983EA144FF90EB3EB64AAFC67A664",
                "owner": "ŠVANTNER MAREK",
                "number": "451161XXXXXX6044",
                "sequenceNumber": "4",
                "productCode": "4511611",
                "expiryDate": "2016-11-30",
                "state": "ACTIVE",
                "type": "BANK_CARD",
                "provider": "ERSTE_BANK",
                "brand": "MASTERCARD",
                "validFromDate": "2013-12-01",
                "characteristic": "MAIN",
                "mainAccount": {
                    "id": "D81E28ADD904A6DD08956E46A3F68CEAF32C8399",
                    "holderName": "Marek Švantner",
                    "accountno": {
                        "number": "1381167123",
                        "bankCode": "0800",
                        "countryCode": "CZ",
                        "cz-iban": "CZ9708000000001381167123",
                        "cz-bic": "GIBACZPX"
                    }
                },
                "cardDeliveryMode": "BRANCH",
                "flags": [
                    "automaticReplacementOn",
                    "secureOnlineShoppingEnabled",
                    "contactlessEnabled"
                    "displayPinAllowed"
                ],
                "features": [
                    "limitChange",
                    "reissuePin",
                    "contactless",
                    "onlineLocking",
                    "temporaryLimitChange",
                    "cardDelivery",
                    "automaticReplacement"
                ],
                "alias": "Moje VISA",
                "creditCard": false,
                "productI18N": "Visa Classic debetní - Partner",
                "imageDataType": {
                    "imageId": "77",
                    "blacBackground": false
                }
            }


# Group Building Savings

## General [/v3/netbanking/my/contracts/buildings{?size,page}]

### Building Savings List [GET]

Resource represents list of building savings for current user. It contains building savings and loans from building savings as well.

For **building saving** entity description see [Building Saving](#introduction/data-types/building-saving).

* Paginated &#10004;

* Sortable &#10006;

* Signable &#10006;

#### Response Fields

| Attribute | General |
| ------ | ------ |
| pageNumber | o | 
| pageCount | o | 
| pageSize | o |
| nextPage | o |
| buildings | o |
| buildings.id | m |
| buildings.accountno | m |
| buildings.accountno.cz-iban | m |
| buildings.accountno.cz-bic | m |
| buildings.accountno.number | m |
| buildings.accountno.bankCode | m |
| buildings.accountno.countryCode | m |
| buildings.alias | o |
| buildings.type | m |
| buildings.product | m |
| buildings.productI18N | m |
| buildings.balance | m |
| buildings.balance.value | m |
| buildings.balance.precision | m |
| buildings.balance.currency | m |
| buildings.status | m |
| buildings.contractHolders | o |
| buildings.creditInterestRate | o |
| buildings.debitInterestRate | o |
| buildings.saving | o |
| buildings.saving.targetAmount | o |
| buildings.saving.targetAmount.value | m |
| buildings.saving.targetAmount.precision | m |
| buildings.saving.targetAmount.currency | m |
| buildings.saving.agreedMonthlySavings | o |
| buildings.saving.agreedMonthlySavings.value | m |
| buildings.saving.agreedMonthlySavings.precision | m |
| buildings.saving.agreedMonthlySavings.currency | m |
| buildings.saving.expiryDate | o |
| buildings.saving.bonusBearingDepositToPay | o |
| buildings.saving.bonusBearingDepositToPay.value | m |
| buildings.saving.bonusBearingDepositToPay.precision | m |
| buildings.saving.bonusBearingDepositToPay.currency | m |
| buildings.loan | o |
| buildings.loan.loanAmount | o |
| buildings.loan.loanAmount.value | m |
| buildings.loan.loanAmount.precision | m |
| buildings.loan.loanAmount.currency | m |
| buildings.loan.loanInstallment | m |
| buildings.loan.loanInstallment.value | m |
| buildings.loan.loanInstallment.precision | m |
| buildings.loan.loanInstallment.currency | m |
| buildings.loan.additionalSavings | o |
| buildings.loan.additionalSavings.value | m |
| buildings.loan.additionalSavings.precision | m |
| buildings.loan.additionalSavings.currency | m |
| buildings.loan.paymentInsurance | o |
| buildings.loan.paymentInsurance.value | m |
| buildings.loan.paymentInsurance.precision | m |
| buildings.loan.paymentInsurance.currency | m |
| buildings.loan.interestRateFromDate | o |
| buildings.loan.interestRateToDate | o |
| buildings.flags | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)
    + Attributes (object)
        - buildings (array[BUILDING], optional) - List of building savings.
        - Include PAGINATION
-->

+ Parameters

    + size: 100 (number, optional) - Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page: 0 (number, optional) - Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
        + Default: 0

+ Request

    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)

        {
            "pageNumber": 0,
            "pageCount": 1,
            "pageSize": 2,
            "buildings": [
                {
                    "id": "90CF22138A5209F3CA260FB2DECB3D9DCDF17E1D",
                    "accountno": {
                        "number": "88815-6480615",
                        "bankCode": "8060",
                        "countryCode": "CZ",
                        "cz-iban": "CZ6080600888150006480615",
                        "cz-bic": "GIBACZPX"
                    },
                    "alias": "Moje stavební spoření",
                    "type": "BUILD_SAVING",
                    "product": "16",
                    "productI18N": "Stavební spoření",
                    "balance": {
                        "value": 5327997,
                        "precision": 2,
                        "currency": "CZK"
                    },
                    "status": "ACTIVE",
                    "creditInterestRate": 2.3,
                    "saving": {
                        "targetAmount": {
                            "value": 15000000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "agreedMonthlySavings": {
                            "value": 10000,
                            "precision": 2,
                            "currency": "CZK"
                        }
                    }
                },
                {
                    "id": "6D4366AA1931BF7E89FD40C222939F7BC56F958B",
                    "accountno": {
                        "number": "88815-6480615",
                        "bankCode": "8060",
                        "countryCode": "CZ",
                        "cz-iban": "CZ6080600888150006480615",
                        "cz-bic": "GIBACZPX"
                    },
                    "alias": "Můj stavební úvěr",
                    "type": "BUILD_LOAN",
                    "product": "18",
                    "productI18N": "Překlenovací úvěr",
                    "balance": {
                        "value": -15023730,
                        "precision": 2,
                        "currency": "CZK"                    
                    },
                    "status": "ACTIVE",
                    "debitInterestRate": 5,
                    "contractHolders": [
                        "Jan Křížek"
                    ],
                    "loan": {
                        "loanAmount": {
                            "value": 15000000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "loanInstallment": {
                            "value": 66900,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "additionalSavings": {
                            "value": 23900,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "paymentInsurance": {
                            "value": 0,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "interestRateFromDate": "2012-02-14",
                        "interestRateToDate": "2016-02-14"
                    }
                }
            ]
        }

### Building Saving Detail [GET /v3/netbanking/my/contracts/buildings/{id}]

Resource represents one building saving product identified by it's identifier. It can be building saving or loan from building saving.

For **building saving** entity description see [Building Saving](#introduction/data-types/building-saving).

* Paginated &#10006;

* Sortable &#10006;

* Signable &#10006;

#### Response Fields

| Attribute | General |
| ------ | ------ |
| id | m |
| accountno | m |
| accountno.cz-iban | m |
| accountno.cz-bic | m |
| accountno.number | m |
| accountno.bankCode | m |
| accountno.countryCode | m |
| alias | o |
| type | m |
| product | m |
| productI18N | m |
| balance | m |
| balance.value | m |
| balance.precision | m |
| balance.currency | m |
| status | m |
| contractHolders | o |
| creditInterestRate | o |
| debitInterestRate | o |
| saving | o |
| saving.targetAmount | o |
| saving.targetAmount.value | m |
| saving.targetAmount.precision | m |
| saving.targetAmount.currency | m |
| saving.agreedMonthlySavings | o |
| saving.agreedMonthlySavings.value | m |
| saving.agreedMonthlySavings.precision | m |
| saving.agreedMonthlySavings.currency | m |
| saving.expiryDate | o |
| saving.bonusBearingDepositToPay | o |
| saving.bonusBearingDepositToPay.value | m |
| saving.bonusBearingDepositToPay.precision | m |
| saving.bonusBearingDepositToPay.currency | m |
| loan | o |
| loan.loanAmount | o |
| loan.loanAmount.value | m |
| loan.loanAmount.precision | m |
| loan.loanAmount.currency | m |
| loan.loanInstallment | m |
| loan.loanInstallment.value | m |
| loan.loanInstallment.precision | m |
| loan.loanInstallment.currency | m |
| loan.additionalSavings | o |
| loan.additionalSavings.value | m |
| loan.additionalSavings.precision | m |
| loan.additionalSavings.currency | m |
| loan.paymentInsurance | o |
| loan.paymentInsurance.value | m |
| loan.paymentInsurance.precision | m |
| loan.paymentInsurance.currency | m |
| loan.interestRateFromDate | o |
| loan.interestRateToDate | o |
| flags | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)
    + Attributes (BUILDING)
-->

+ Parameters

    + id: 90CF22138A5209F3CA260FB2DECB3D9DCDF17E1D (string, required) - Building savings contract identifier.

+ Request

    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)

            {
                "id": "90CF22138A5209F3CA260FB2DECB3D9DCDF17E1D",
                "accountno": {
                    "number": "88815-6480615",
                    "bankCode": "8060",
                    "countryCode": "CZ",
                    "cz-iban": "CZ6080600888150006480615",
                    "cz-bic": "GIBACZPX"
                },
                "alias": "Moje stavební spoření",
                "type": "BUILD_SAVING",
                "product": "16",
                "productI18N": "Stavební spoření",
                "balance": {
                    "value": 5327997,
                    "precision": 2,
                    "currency": "CZK"
                },
                "status": "ACTIVE",
                "creditInterestRate": 2.3,
                "saving": {
                    "targetAmount": {
                        "value": 15000000,
                        "precision": 2,
                        "currency": "CZK"
                    },
                    "agreedMonthlySavings": {
                        "value": 10000,
                        "precision": 2,
                        "currency": "CZK"
                    }
                }
            }


# Group Pensions

## General [/v3/netbanking/cz/my/contracts/pensions{?size,page}]

### Pensions List [GET]

Call returns list of pension products which belongs to current user. This includes Pension Savings, Supplementary Pension Insurance and Supplementary Pension Savings.

For **pension contract** entity description see [Pension Contract](#introduction/data-types/pension-contract).

* Paginated &#10004;

* Sortable &#10006;

* Signable &#10006;

#### Response Fields

| Attribute | General | Pension Savings | Supplementary Pension Insurance | Supplementary Pension Savings |
| ------ | ------ | ------ | ------ | ------ |
| pageNumber | o | o | o | o |
| pageCount | o | o | o | o |
| pageSize | o | o | o | o |
| nextPage | o | o | o | o |
| pensions | o | o | o | o |
| pensions.owner | o | o | o | o |
| pensions.alias | o | o | o | o |
| pensions.signingDate | o | o | o | o |
| pensions.validFrom | o | o | o | o |
| pensions.validTo | o | o | o | o |
| pensions.id | m | m | m | m |
| pensions.agreementNumber | m | m | m | m |
| pensions.status | m | m | m | m |
| pensions.productAccount | m | m | m | m |
| pensions.productAccount.amount | m | m | m | m |
| pensions.productAccount.amount.value | m | m | m | m |
| pensions.productAccount.amount.currency | m | m | m | m |
| pensions.productAccount.amount.precision | m | m | m | m |
| pensions.productAccount.date | m | m | m | m |
| pensions.productI18N | m | m | m | m |
| pensions.product | m | m | m | m |
| pensions.subtype | m | m | m | m |
| pensions.birthNumber | m | m | m | m |
| pensions.paidBenefits | m | m | m | m |
| pensions.paidBenefits.value | m | m | m | m |
| pensions.paidBenefits.currency | m | m | m | m |
| pensions.paidBenefits.precision | m | m | m | m |
| pensions.strategy | o | o | - | o |
| pensions.strategy.conservative | o | o | - | o |
| pensions.strategy.balanced | o | o | - | o |
| pensions.strategy.dynamic | o | o | - | o |
| pensions.strategy.stateBonds | o | o | - | - |
| pensions.pensionAgreed | o | - | o | o |
| pensions.pensionAgreed.oldAge | o | - | o | o |
| pensions.pensionAgreed.disability | o | - | o | o |
| pensions.pensionAgreed.earlyRetirement | o | - | o | - |
| pensions.savingTime | o | - | o | o |
| pensions.savingTime.supplementary | m | - | - | o |
| pensions.savingTime.oldAge | o | - | o | - |
| pensions.savingTime.earlyRetirement | o | - | o | - |
| pensions.contribution | m | - | m | m |
| pensions.contribution.employer | m | - | m | m |
| pensions.contribution.participantAmount | m | - | m | m |
| pensions.contribution.participantAmount.value | m | - | m | m |
| pensions.contribution.participantAmount.precision | m | - | m | m |
| pensions.contribution.participantAmount.currency | m | - | m | m |
| pensions.contribution.otherPersonAmount | m | - | m | - |
| pensions.contribution.otherPersonAmount.value | m | - | m | - |
| pensions.contribution.otherPersonAmount.precision | m | - | m | - |
| pensions.contribution.otherPersonAmount.currency | m | - | m | - |
| pensions.supplementary | o | - | o | o |
| pensions.supplementary.email | o | - | o | o |
| pensions.supplementary.sms | o | - | o | o |
| pensions.supplementary.maxService | o | - | o | o |
| pensions.supplementary.optService | o | - | - | o |
| pensions.beneficiaries | o | - | o | o |
| pensions.beneficiaries.name | m | - | m | m |
| pensions.beneficiaries.birthDate | m | - | m | m |
| pensions.beneficiaries.birthNumber | o | - | o | o |
| pensions.beneficiaries.address | o | - | - | m |
| pensions.beneficiaries.address.street | o | - | - | o |
| pensions.beneficiaries.address.streetNumber | o | - | - | o |
| pensions.beneficiaries.address.buildingApartment | o | - | - | o |
| pensions.beneficiaries.address.city | o | - | - | m |
| pensions.beneficiaries.address.zipCode | o | - | - | m |
| pensions.beneficiaries.address.country | o | - | - | m |
| pensions.beneficiaries.share | m | - | m | m |
| pensions.beneficiaries.entitlement | o | - | m | - |
| pensions.flags | o | o | o | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)
    + Attributes (object)
        - pensions (array[PENSION], optional) - List of pensions.
        - Include PAGINATION
-->

+ Parameters

    + size: 100 (number, optional) - Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page: 0 (number, optional) - Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
        + Default: 0

+ Request

    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)

            {
                "pageNumber": 0,
                "pageCount": 0,
                "pageSize": 2,
                "nextPage": 1,
                "pensions": [
                    {
                        "alias": "moje penzijko",
                        "signingDate": "2013-06-12",
                        "validFrom": "2013-08-01",
                        "validTo": "2019-08-01",
                        "id": "8B1BA83D7CE9B8B2B677E914C3EDA4F78813040A",
                        "agreementNumber": "8675590033",
                        "status": "ACTIVE",
                        "productAccount": {
                            "amount": {
                                "value": 24710472,
                                "precision": "2",
                                "currency": "CZK"
                            },
                            "date": "2015-01-18"
                        },
                        "productI18N": "Penzijní připojištění",
                        "product": "19",
                        "subtype": "SUPPLEMENTARY_INSURANCE"
                        "birthNumber": "9005087056",
                        "paidBenefits": {
                            "value": 0,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "strategy": {
                            "conservative": 10,
                            "balanced": 80,
                            "dynamic": 10,
                            "stateBonds": 0
                        },
                        "pensionAgreed": {
                            "oldAge": true,
                            "disability": false,
                            "earlyRetirement": 13
                        },
                        "savingTime": {
                            "supplementary": 51,
                            "oldAge": 51,
                            "earlyRetirement": 51
                        },
                        "contribution": {
                            "employer": "true",
                            "participantAmount": {
                                "value": 1000,
                                "precision": 2,
                                "currency": "CZK"
                            },
                            "otherPersonAmount": {
                                "value": 100,
                                "precision": 2,
                                "currency": "CZK"
                            }
                        },
                        "supplementary": {
                            "email": "franz@beeone.cz",
                            "sms": "778525968",
                            "maxService": true,
                            "optService": true
                        },
                        "beneficiaries": {
                            "name": "Jan Nožka",
                            "birthDate": "1984-12-21",
                            "birthNumber": "8412218245",
                            "share": 100,
                            "entitlement": "TAKEOVER"
                        }
                    }
                ]
            }

### Pension Detail [GET /v3/netbanking/cz/my/contracts/pensions/{id}]

Call returns detail of pension product which belongs to current user identified by it's id. This can be Pension Saving, Supplementary Pension Insurance and Supplementary Pension Saving.

For **pension contract** entity description see [Pension Contract](#introduction/data-types/pension-contract).

* Paginated &#10006;

* Sortable &#10006;

* Signable &#10006;

#### Response Fields

| Attribute | General | Pension Savings | Supplementary Pension Insurance | Supplementary Pension Savings |
| ------ | ------ | ------ | ------ | ------ |
| owner | o | o | o | o |
| alias | o | o | o | o |
| signingDate | o | o | o | o |
| validFrom | o | o | o | o |
| validTo | o | o | o | o |
| id | m | m | m | m |
| agreementNumber | m | m | m | m |
| status | m | m | m | m |
| productAccount | m | m | m | m |
| productAccount.amount | m | m | m | m |
| productAccount.amount.value | m | m | m | m |
| productAccount.amount.currency | m | m | m | m |
| productAccount.amount.precision | m | m | m | m |
| productAccount.date | m | m | m | m |
| productI18N | m | m | m | m |
| product | m | m | m | m |
| subtype | m | m | m | m |
| birthNumber | m | m | m | m |
| paidBenefits | m | m | m | m |
| paidBenefits.value | m | m | m | m |
| paidBenefits.currency | m | m | m | m |
| paidBenefits.precision | m | m | m | m |
| strategy | o | o | - | o |
| strategy.conservative | o | o | - | o |
| strategy.balanced | o | o | - | o |
| strategy.dynamic | o | o | - | o |
| strategy.stateBonds | o | o | - | - |
| pensionAgreed | o | - | o | o |
| pensionAgreed.oldAge | o | - | o | o |
| pensionAgreed.disability | o | - | o | o |
| pensionAgreed.earlyRetirement | o | - | o | - |
| savingTime | o | - | o | o |
| savingTime.supplementary | m | - | - | o |
| savingTime.oldAge | o | - | o | - |
| savingTime.earlyRetirement | o | - | o | - |
| contribution | m | - | m | m |
| contribution.employer | m | - | m | m |
| contribution.participantAmount | m | - | m | m |
| contribution.participantAmount.value | m | - | m | m |
| contribution.participantAmount.precision | m | - | m | m |
| contribution.participantAmount.currency | m | - | m | m |
| contribution.otherPersonAmount | m | - | m | - |
| contribution.otherPersonAmount.value | m | - | m | - |
| contribution.otherPersonAmount.precision | m | - | m | - |
| contribution.otherPersonAmount.currency | m | - | m | - |
| supplementary | o | o | o | o |
| supplementary.email | o | - | o | o |
| supplementary.sms | o | - | o | o |
| supplementary.maxService | o | - | o | o |
| supplementary.optService | o | - | - | o |
| beneficiaries | o | - | o | o |
| beneficiaries.name | m | - | m | m |
| beneficiaries.birthDate | m | - | m | m |
| beneficiaries.birthNumber | o | - | o | o |
| beneficiaries.address | o | - | - | m |
| beneficiaries.address.street | o | - | - | o |
| beneficiaries.address.streetNumber | o | - | - | o |
| beneficiaries.address.buildingApartment | o | - | - | o |
| beneficiaries.address.city | o | - | - | m |
| beneficiaries.address.zipCode | o | - | - | m |
| beneficiaries.address.country | o | - | - | m |
| beneficiaries.share | m | - | m | m |
| beneficiaries.entitlement | o | - | m | - |
| flags | o | o | o | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)
    + Attributes (PENSION)
-->

+ Parameters

    + id: 8B1BA83D7CE9B8B2B677E914C3EDA4F78813040A (string, required) - Pension contract identifier.

+ Request

    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)

            {
                "alias": "moje penzijko",
                "signingDate": "2013-06-12",
                "validFrom": "2013-08-01",
                "validTo": "2019-08-01",
                "id": "8B1BA83D7CE9B8B2B677E914C3EDA4F78813040A",
                "agreementNumber": "8675590033",
                "status": "ACTIVE",
                "productAccount": {
                    "amount": {
                        "value": 24710472,
                        "precision": "2",
                        "currency": "CZK"
                    },
                    "date": "2015-01-18"
                },
                "productI18N": "Penzijní připojištění",
                "product": "19",
                "subtype": "SUPPLEMENTARY_INSURANCE",
                "birthNumber": "9005087056", 
                "paidBenefits": {
                    "value": 0,
                    "precision": 2,
                    "currency": "CZK"
                },    
                "strategy": {
                    "conservative": 10,
                    "balanced": 80,
                    "dynamic": 10,
                    "stateBonds": 0
                },    
                "pensionAgreed": {
                    "oldAge": true,
                    "disability": false,
                    "earlyRetirement": 13
                },    
                "savingTime": {
                    "supplementary": 51,
                    "oldAge": 51,
                    "earlyRetirement": 51
                },    
                "contribution": {
                    "employer": true,
                    "participantAmount": {
                        "value": 1000,
                        "precision": 2,
                        "currency": "CZK"
                    },
                    "otherPersonAmount": {
                        "value": 100,
                        "precision": 2,
                        "currency": "CZK"
                    }
                },
                "supplementary": {
                    "email": "franz@beeone.cz",
                    "sms": "778525968",
                    "maxService": true,
                    "optService": true
                },
                "beneficiaries": {
                    "name": "Jan Nožka",
                    "birthDate": "1984-12-21",
                    "birthNumber": "8412218245",
                    "share": 100,
                    "entitlement": "TAKEOVER"
                }
            }


# Group Insurances

## General [/v3/netbanking/my/contracts/insurances{?size,page}]

### Insurances List [GET]

Resource which represents list of life insurances for current user.

For **insurance** entity description see [Insurance](#introduction/data-types/insurance).

* Paginated &#10004;

* Sortable &#10006;

* Signable &#10006;

#### Response Fields

| Attribute | General |
| ------ | ------ |
| pageNumber | o |
| pageCount | o |
| pageSize | o |
| nextPage | o |
| insurances | o |
| insurances.id | m |
| insurances.type | m |
| insurances.product | m |
| insurances.productI18N | m |
| insurances.alias | o |
| insurances.insurancePolicyHolder | m |
| insurances.policyNumber | m |
| insurances.status | m |
| insurances.life | o |
| insurances.life.premiumPaymentInterval | m |
| insurances.life.premium | m |
| insurances.life.premium.value | m |
| insurances.life.premium.precision | m |
| insurances.life.premium.currency | m |
| insurances.life.contractEndDate | o |
| insurances.life.contractStartDate | m |
| insurances.life.cz-contractEndReason | o |
| insurances.life.insuredAmount | m |
| insurances.life.insuredAmount.value | m |
| insurances.life.insuredAmount.precision | m |
| insurances.life.insuredAmount.currency | m |
| insurances.life.currentCapitalValue | o |
| insurances.life.currentCapitalValue.value | m |
| insurances.life.currentCapitalValue.precision | m |
| insurances.life.currentCapitalValue.currency | m |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)
    + Attributes (object)
        - insurances (array[INSURANCE], optional) - List of insurances.
        - Include PAGINATION
-->

+ Parameters

    + size: 100 (number, optional) - Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page: 0 (number, optional) - Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
        + Default: 0
    
+ Request

    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)

        {
            "pageNumber": 8,
            "pageCount": 9,
            "pageSize": 2,
            "nextPage": 9,
            "insurances": [
                {
                    "id": "8668F507BA61DA7E709825E6A5A52BB1B5DB8A09",
                    "type": "LIFE",
                    "alias": "Moje životko",
                    "policyNumber": "12354821556535445",
                    "product": "12",
                    "productI18N": "Životní pojištění",
                    "insurancePolicyHolder": "Kamper Manfred",
                    "status": "ACTIVE",
                    "life": {
                       "premiumPaymentInterval": "MONTHLY",
                       "premium": {
                           "value": 42100,
                           "precision": 2,
                           "currency": "CZK"
                       },
                       "contractEndDate": "2015-02-28",
                       "contractStartDate": "2011-02-28",
                       "insuredAmount": {
                           "value": 100000000,
                           "precision": 2,
                           "currency": "CZK"
                       },
                       "currentCapitalValue": {
                           "value": 14121400,
                           "precision": 2,
                           "currency": "CZK"
                       }
                    }
                },
                {
                    "id": "8668F507BA61DA7E709825E6A5A52BB1B5DB8A10",
                    "type": "LIFE",
                    "alias": "contract alias",
                    "policyNumber": "12354821556530789",
                    "product": "U89",
                    "productI18N": "Pojištění majetku",
                    "insurancePolicyHolder": "Kamper Manfred",
                    "status": "ACTIVE",
                    "life": {
                       "premiumPaymentInterval": "MONTHLY",
                       "premium": {
                           "value": 4220000,
                           "precision": 2,
                           "currency": "EUR"
                       },
                       "contractEndDate": "2009-03-31",
                       "contractStartDate": "2011-02-28",
                       "insuredAmount": {
                           "value": 4220000,
                           "precision": 2,
                           "currency": "EUR"
                       },
                       "currentCapitalValue": {
                           "value": 14121400,
                           "precision": 2,
                           "currency": "CZK"
                       }
                    }
                }
            ]
        }

### Insurance Detail [GET /v3/netbanking/my/contracts/insurances/{id}]

Returns detail of the life insurance identified by it's id.

For **insurance** entity description see [Insurance](#introduction/data-types/insurance).

* Paginated &#10006;

* Sortable &#10006;

* Signable &#10006;

#### Response Fields

| Attribute | General |
| ------ | ------ |
| id | m |
| type | m |
| product | m |
| productI18N | m |
| alias | o |
| insurancePolicyHolder | m |
| policyNumber | m |
| status | m |
| life | o |
| life.premiumPaymentInterval | m |
| life.premium | m |
| life.premium.value | m |
| life.premium.precision | m |
| life.premium.currency | m |
| life.contractEndDate | o |
| life.contractStartDate | m |
| life.cz-contractEndReason | o |
| life.insuredAmount | m |
| life.insuredAmount.value | m |
| life.insuredAmount.precision | m |
| life.insuredAmount.currency | m |
| life.currentCapitalValue | o |
| life.currentCapitalValue.value | m |
| life.currentCapitalValue.precision | m |
| life.currentCapitalValue.currency | m |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | CZ-VALUE\_OUT\_OF\_RANGE | Value is out of range. |
| 400 | ID\_MISMATCH | The identifier specified in the payload does not match the identifier specified in the URI. |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)
    + Attributes (INSURANCE)
-->

+ Parameters

    + id: 8668F507BA61DA7E709825E6A5A52BB1B5DB8A09 (string, required) - Identifier of the contract.

+ Request

    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)

                {
                    "id": "8668F507BA61DA7E709825E6A5A52BB1B5DB8A09",
                    "type": "LIFE",
                    "alias": "Moje životko",
                    "policyNumber": "12354821556535445",
                    "product": "12",
                    "productI18N": "Životní pojištění",
                    "insurancePolicyHolder": "Kamper Manfred",
                    "status": "ACTIVE",
                    "life": {
                        "premiumPaymentInterval": "MONTHLY",
                        "premium": {
                            "value": 42100,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "contractEndDate": "2015-02-28",
                        "contractStartDate": "2011-02-28",
                        "insuredAmount": {
                            "value": 100000000,
                            "precision": 2,
                            "currency": "CZK"
                        },
                        "currentCapitalValue": {
                            "value": 14121400,
                            "precision": 2,
                            "currency": "CZK"
                        }
                    }
                }

## Detail [/v3/netbanking/cz/my/contracts/insurances/{id}/detail]

### Insurance Detail [GET]

Returns extended detail of the life insurance identified by it's id.

For **insurance detail extended** entity description see [Insurance Detail Extended](#introduction/data-types/insurance-detail-extended).

* Paginated &#10006;

* Sortable &#10006;

* Signable &#10006;

#### Response Fields

| Attribute | General |
| ------ | ------ |
| id | m |
| type | m |
| product | m |
| productI18N | m |
| alias | o |
| insurancePolicyHolder | m |
| policyNumber | m |
| status | m |
| life | m |
| life.premiumPaymentInterval | m |
| life.premium | m |
| life.premium.value | m |
| life.premium.precision | m |
| life.premium.currency | m |
| life.contractEndDate | m |
| life.contractStartDate | m |
| life.insuredAmount | m |
| life.insuredAmount.value | m |
| life.insuredAmount.precision | m |
| life.insuredAmount.currency | m |
| life.currentCapitalValue | o |
| life.currentCapitalValue.value | m |
| life.currentCapitalValue.precision | m |
| life.currentCapitalValue.currency | m |
| life.cz-capitalValueMaxWithdrawal | o |
| life.cz-capitalValueMaxWithdrawal.value | m |
| life.cz-capitalValueMaxWithdrawal.precision | m |
| life.cz-capitalValueMaxWithdrawal.currency | m |
| life.contractTerminationDate | o | 
| life.contractTerminationReason | o |
| life.premiumPaymentMethodI18N | o | 
| life.premiumLastPaid | o | 
| life.technicalInterestRate | o | 
| life.employerBenefit | o | 
| life.employerBenefit.frequency | o | 
| life.employerBenefit.type | o | 
| life.employerBenefit.amount | o | 
| life.employerBenefit.amount.value | m | 
| life.employerBenefit.amount.precision | m |
| life.employerBenefit.amount.currency | m | 
| life.immobilization. | o |
| life.immobilization.contractNumber | m |
| life.immobilization.partner | m |
| life.paymentTemplates | o |
| life.paymentTemplates.type | o |
| life.paymentTemplates.symbols | o |
| life.paymentTemplates.symbols.variableSymbol | o |
| life.paymentTemplates.receiver | o |
| life.paymentTemplates.receiver.number | m |
| life.paymentTemplates.receiver.bankCode | m |
| life.flags | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)
    + Attributes (INSURANCE_DETAIL_EXTENDED)
-->

+ Parameters

    + id: 8668F507BA61DA7E709825E6A5A52BB1B5DB8A09 (string, required) - Identifier of the contract.

+ Request

    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)

                {
                    "id": "8668F507BA61DA7E709825E6A5A52BB1B5DB8A09",
                    "type": "LIFE",
                    "alias": "Moje životko",
                    "policyNumber": "12354821556535445",
                    "product": "12",
                    "productI18N": "Životní pojištění",
                    "insurancePolicyHolder": "Kamper Manfred",
                    "status": "ACTIVE",
                    "life": {
                       "premiumPaymentInterval": "MONTHLY",
                       "premium": {
                           "value": 42100,
                           "precision": 2,
                           "currency": "CZK"
                       },
                       "contractEndDate": "2015-02-28",
                       "contractStartDate": "2011-02-28",
                       "insuredAmount": {
                           "value": 100000000,
                           "precision": 2,
                           "currency": "CZK"
                       },
                       "currentCapitalValue": {
                           "value": 14121400,
                           "precision": 2,
                           "currency": "CZK"
                       },
                       "cz-capitalValueMaxWithdrawal": {
                           "value": 700000,
                           "precision": 2,
                           "currency": "CZK"
                       },
                       "contractTerminationDate" : "2015-02-28",
                       "contractTerminationReason" : "Short explanatory text which describes the reason behind contract termination risk",
                       "premiumPaymentMethodI18N" : "Složenkou",
                       "premiumLastPaid" : "2014-12-22",
                       "technicalInterestRate" : 3,
                       "employerBenefit" : {
                           "type": "WHOLE_PREMIUM",
                           "amount" : {
                               "value": 100000,
                               "precision": 2,
                               "currency": "CZK"
                           }
                        },
                        "immobilization" : {
                               "contractNumber": "12345678",
                               "partner": "Česká spořitelna"
                        },
                        "paymentTemplates" : [{
                               "type": "ORDINARY",
                               "symbols": {
                                   "variableSymbol": "1234"
                               },
                               "receiver": {
                                   "number": "2326573123",
                                   "bankCode": "0800"
                               }
                        },
                        {
                               "type": "EXTRAORDINARY",
                               "symbols": {
                                   "variableSymbol": "45678"
                               },
                               "receiver": {
                                   "number": "2326573123",
                                   "bankCode": "0800"
                               }
                        }],
                        "flags": [
                            "contractTermination",
                            "capitalValueWithdrawalEnabled"
                        ]
                    }
                }


# Group Securities Accounts

## General [/v3/netbanking/my/securities{?size,page}]

### Securities Accounts List [GET]

The call which returns list of securities accounts for current user. Securities account represents virtual account which holds securities titles and its shares (funds, bonds, etc.).

For **securities account** entity description see [Securities Account](#introduction/data-types/securities-account).

* Paginated &#10004;

* Sortable &#10006;

* Signable &#10006;

#### Response Fields

| Attribute | General |
| ------ | ------ |
| pageNumber | o |
| pageCount | o |
| pageSize | o |
| nextPage | o |
| securitiesAccounts | o |
| securitiesAccounts.id | m |
| securitiesAccounts.accountno | m |
| securitiesAccounts.alias | o |
| securitiesAccounts.description | m |
| securitiesAccounts.balance | m |
| securitiesAccounts.balance.value | m |
| securitiesAccounts.balance.precision | m |
| securitiesAccounts.balance.currency | m |
| securitiesAccounts.subSecAccounts | o |
| securitiesAccounts.subSecAccounts.id | m |
| securitiesAccounts.subSecAccounts.titles | o |
| securitiesAccounts.subSecAccounts.titles.title | m |
| securitiesAccounts.subSecAccounts.titles.isin | m |
| securitiesAccounts.subSecAccounts.titles.numberOfShares | m |
| securitiesAccounts.subSecAccounts.titles.lastPrice | m |
| securitiesAccounts.subSecAccounts.titles.lastPrice.value | m |
| securitiesAccounts.subSecAccounts.titles.lastPrice.precision | m |
| securitiesAccounts.subSecAccounts.titles.lastPrice.currency | m |
| securitiesAccounts.subSecAccounts.titles.lastPriceDate | m |
| securitiesAccounts.subSecAccounts.titles.marketValue | m |
| securitiesAccounts.subSecAccounts.titles.marketValue.value | m |
| securitiesAccounts.subSecAccounts.titles.marketValue.precision | m |
| securitiesAccounts.subSecAccounts.titles.marketValue.currency | m |
| securitiesAccounts.subSecAccounts.titles.securityType | m |
| securitiesAccounts.subSecAccounts.titles.productGroup | m |
| securitiesAccounts.subSecAccounts.titles.securityIndication | m |
| securitiesAccounts.flags | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 400 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)
    + Attributes (object)
        - securities (array[SECURITY], optional) - List of securities.
        - Include PAGINATION
-->

+ Parameters

    + size: 100 (number, optional) - Paging. Size of the page. There is no predefined size limit. If it is omitted, all records are returned in one large list.
    + page: 0 (number, optional) - Paging. Requested page. page count starts at zero, so 0 is the first page, 1 the second and so forth. If size is given without any page, page=0 is assumed.
        + Default: 0

+ Request

    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)

        {
            "pageNumber": 0,
            "pageCount": 1,
            "pageSize": 1,
            "securitiesAccounts": [{
                "id": "7CAB6A36D07103CFA1BAE1CABF5A5C9B755B4B46",
                "accountno": "1004173478",
                "alias": "Můj majetkáč",
                "description": "Marek Novák",
                "balance": {
                    "value": 888059,
                    "precision": 2,
                    "currency": "CZK"
                }
            }]
        }


### Securities Account Detail [GET /v3/netbanking/my/securities/{id}]

Get a single securities account with all its details. Securities account represents virtual account which holds securities titles and its shares (funds, bonds, etc.).

For **securities account** entity description see [Securities Account](#introduction/data-types/securities-account).

* Paginated &#10006;

* Sortable &#10006;

* Signable &#10006;

#### Response Fields

| Attribute | General |
| ------ | ------ |
| id | m |
| accountno | m |
| alias | o |
| description | m |
| balance | m |
| balance.value | m |
| balance.precision | m |
| balance.currency | m |
| subSecAccounts | o |
| subSecAccounts.id | m |
| subSecAccounts.titles | o |
| subSecAccounts.titles.title | m |
| subSecAccounts.titles.isin | m |
| subSecAccounts.titles.numberOfShares | m |
| subSecAccounts.titles.lastPrice | m |
| subSecAccounts.titles.lastPrice.value | m |
| subSecAccounts.titles.lastPrice.precision | m |
| subSecAccounts.titles.lastPrice.currency | m |
| subSecAccounts.titles.lastPriceDate | m |
| subSecAccounts.titles.marketValue | m |
| subSecAccounts.titles.marketValue.value | m |
| subSecAccounts.titles.marketValue.precision | m |
| subSecAccounts.titles.marketValue.currency | m |
| subSecAccounts.titles.securityType | m |
| subSecAccounts.titles.productGroup | m |
| subSecAccounts.titles.securityIndication | m |
| flags | o |

#### Error Codes

| HTTP Status Code | Error Code | Purpose |
| ------ | ------ | ------ |
| 404 | ID\_NOT\_FOUND | The provided ID does not exist. |

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)
    + Attributes (SECURITY)
-->

+ Parameters

    + id: 7CAB6A36D07103CFA1BAE1CABF5A5C9B755B4B46 (string, required) - Identifier of the securities account.

+ Request

    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001
            
+ Response 200 (application/json)

    + Body
    
            {
                "id": "7CAB6A36D07103CFA1BAE1CABF5A5C9B755B4B46",
                "accountno": "1004173478",
                "alias": "Můj majetkáč",
                "description": "Marek Novák",
                "balance": {
                    "value": 888059,
                    "precision": 2,
                    "currency": "CZK"
                }
            }
          

# Group Profile

## Profile [/v3/netbanking/my/profile]

### Current User Profile [GET]

This call returns basic information about current user.

For **profile** entity description see [Profile](#introduction/data-types/profile).

* Paginated &#10006;

* Sortable &#10006;

* Signable &#10006;

#### Response Fields

| Attribute | General |
| ------ | ------ |
| firstname | m |
| lastname | m |
| salutation | o |
| customerId | m |
| instituteId | m |
| marketingInfoAcceptance | m |
| gender | m |
| lastlogin | o |

#### Error Codes

No additional error codes.

<!--
+ Request MSON (application/json)
    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)
    + Attributes (PROFILE)
-->

+ Request

    + Headers

            WEB-API-key: 35bd5a35-5909-460e-b3c2-20073d9c4c2e
            Authorization: Bearer demo_001

+ Response 200 (application/json)

            {
                "firstname": "Jan",
                "lastname": "Novak",
                "salutation": "Jane",
                "customerId": "ABC123",
                "instituteId": 1,
                "marketingInfoAcceptance": "ACCEPTED",
                "gender": "MALE",
                "lastlogin": "2013-11-28T16:18:10Z"
            }


## Data Structures

### Paged Account Transactions (object)
- pageNumber: 0 (required, number) - current page number
- pageCount: 2 (required, number) - total number of pages
- nextPage: 1 (optional, number) - next page number (if next page exists)
- pageSize: 100 (required, number) - number of records per page
- transactions (array[Account Transaction])

### Account Transaction (object)
- accountParty (required, object)
    - accountNumber: `2812275553` (required, string) - account number of transaction party
    - accountPrefix: `0` (optional, string) - account prefix of transaction party
    - bankCode: `0800` (required, string) - account bank code of transaction party
    - bic: `GIBACZPX` (required, string) - id of bank/branch, constant for domestic accounts in csas
    - iban: `CZ2908000000002812275553` (required, string) - account number of transaction party in IBAN format
    - partyInfo: `Petr Malý` (required, string) - name of transaction party. For ATM transaction, masked card number used in transaction
    - partyDescription: `2812275553/0800` (required, string) - whole account number including bank of transaction party. For ATM transaction, address of ATM if known. For card transaction, identification (name) of the merchant.
- additionalTexts (optional, string) - additional info to transaction - not used
- amount (required, object)
    - currency: `CZK` (required, string) - currency
    - precision: 2 (required, number) - precision (constant: 2)
    - value: 100 (required, number) - value of the transaction
- amountSender (required, object)
    - currency: `CZK` (required, string) - currency
    - precision: 2 (required, number) - precision (constant: 2) - same as amount.precision
    - value: 100 (required, number) - value of the transaction - same as amount.value
- bookingDate: `2014-11-26T00:00:00+01:00` (required, string) - date of booking
- bookingType (optional, string) - type of booking
- cardNumber: 0 (required, number) - number of card used in transaction
- constantSymbol: `0558` (required, string) - constant symbol
- currRateEURDate (optional, string) - date of conversion
- currRateEURValue (optional, string) - conversion rates in EUR
- description: `domácí platba` (required, string) - user description of the transaction
- descriptionEditable: false (required) - true=description could be changed using PUT method/false
- id: `I141126DXHZ3T` (required, string) - transaction reference ID
- paymentReference (optional, string) - not used
- payeeNote: `note for payee` (required, string) - note for payee ("zpráva pro příjemce"). Up to 140 chars. For foreign transactions, additional info about currency rate etc.
- payerNote: `note for payer` (required, string) - note for payer ("zpráva pro mě"). Up to 140 chars.
- specificSymbol: `55` (required, string) - specific symbol
- state (optional, string) - transaction state
- timestampId (optional, string) - not used
- transactionType: `54` (required, string) - type of transaction
- valuationDate: `2014-11-26T00:00:00+01:00` (required, string) - date of valuation
- variableSymbol: `0000000009` (required, string) - variable symbol

### ACCOUNT (object)

This object represents account in bank.

#### Properties

- id: D2C8C1DCC51A3738538A40A4863CA288E0225E52 (string, required) - Unique product id.
- alias: Toto je moje osobní pojmenování tohoto produktu (string, optional) - User defined account name. Max. 50 characters.
- balance (AMOUNT, required) - Actual account balance. For loans this field contains outstanding principal.
- disposable (AMOUNT, optional) - Disposable account balance.
- type: CURRENT (ACCOUNT_TYPE, required) - Product type.
- subtype: CURRENT_ACCOUNT (ACCOUNT_SUBTYPE, required) - Subtype type.
- product: 54 (string, required) - Product code.
- productI18N: Osobní účet ČS II (string, required) - Product name.
- overdraft (AMOUNT, optional) - Overdraft value. Exists only for current accounts.
- overdraftDueDate: `2015-07-31` (DATE, optional) - Due date of overdraft. Only for overdrafts where automatic prolongation is not set.
- description: Tonda Paleček (string, optional) - Account description. Currently account owner name is returned.
- flags (array[string], optional) - Array of flags for account.
    - Sample
        - accountQueryAllowed
        - domesticTransferAllowed
        - internationalTransferAllowed
        - ownTransferAllowed
        - urgentTransferAllowed
    - Items
        - accountQueryAllowed - User may see the transaction list for this account.
        - ownTransferAllowed - Account may be used for transfer between own accounts.
        - domesticTransferAllowed - Account may be used for domestic payments.
        - collectiveSigning - Indicates if orders sended from this account have to be signed by at least two users.
        - internationalTransferAllowed - Account may be used for foreign payments.
        - urgentTransferAllowed - Account may be used for urgent transfers.
        - offline - Account is offline (no transactions can be requested), but still visible to the user. e.g. account is currently closing.
        - owner - Current user is owner of the account.
        - dcsAllowed - Account is enabled for "Data Carrier Service".
        - electronicStatementAllowed - User may see the electronic statements list and download statement for this account.
        - directDebitAllowed - Direct debits are allowed for this account. You can call /netbanking/cz/my/accounts/{id}/directdebits resources for this account. You can setup direct debit with type DIRECT_DEBIT.
        - sipoDirectDebitAllowed - Direct debits are allowed for this account. You can call /netbanking/cz/my/accounts/{id}/directdebits resources for this account. You can setup direct debit with type SIPO.
        - standingOrderNotAllowed - Standing orders are not allowed for this account. You can call /netbanking/my/accounts/{id}/standingorders resources for accounts without this flag.
        - savingTargetsAllowed - Saving targets are allowed for this account. You can call /netbanking/cz/my/accounts/{id}/savingTargets resources for this account.
- subaccounts (array[SUBACCOUNT], optional) - Possible list of subaccounts. Currently only linked saving accounts are returned.
- creditInterestRate: 0.5 (number, optional) - Basic credit interest rate, used for current and saving accounts. Value in percentage, e.g. 0.5 will be displayed as 0,5 %.
- debitInterestRate: 11.5 (number, optional) - Basic debit Interest rate, used for Loan and Mortgage account. Value in percentage, e.g. 11.5 will be displayed as 11,5 %.
- penaltyInterestRate: 19.5 (number, optional) - For loans (not mortgages) this is interest rate which apply when repayment is delayed. Value in percentage, e.g. 19.5 will be displayed as 19,5 %.
- loan (LOAN_ACCOUNT_DATA, optional) - Object holding specific data for loans.
- saving (SAVING_ACCOUNT_DATA, optional) - Object holding specific data for savings.
- ownTransferReceivers (array[OWN_TRANSFER_RECEIVER], optional) - Array of allowed receivers. If this array is empty you can transfer funds to all possilbe accounts. Otherwise transfer is restricted to given list of accounts.

### ACCOUNT_BALANCE (object)

Account balance.

#### Properties

- balance (AMOUNT, required) - Account balance for Current account, Saved amount for Saving, Principal Outstanding for Loan/Mortgage.
- disposable (AMOUNT, optional) - Disposable balance for Current account.
- overdraft (AMOUNT, optional) - Overdraft amount for Current amount.

### ACCOUNT_EDITABLE (object)

Object which is used to change editable account properties.

#### Properties

- id: D2C8C1DCC51A3738538A40A4863CA288E0225E52 (string, optional) - Unique product id.
- alias: Toto je moje osobní pojmenování tohoto produktu (string, optional) - User defined account name. Max. 50 characters.

### ACCOUNT_SERVICE (object)

Service object for accounts.

#### Properties

- Include SERVICE
- dateFrom: `2014-07-31+0100` (DATE, optional) - Service validity from.
- dateTo: `2014-08-31+0100` (DATE, optional) - Service validity to.

### ACCOUNT_TYPE (enum)

Enum which describes type of the account.

#### Members

- CURRENT - Current account.
- SAVING - Saving account.
- LOAN - Loan.

### ACCOUNT_SUBTYPE (enum)

Enum which describes subtype of the account.

#### Members

- CURRENT_ACCOUNT - Current account (for type CURRENT).
- INVESTMENT_CURRENT_ACCOUNT - Investment current account (for type CURRENT).
- GIRO_ACCOUNT - Giro account (for type CURRENT).
- GIRO_ACCOUNT_OLD - Old version of giro account (for type CURRENT).
- FOREIGN_ACCOUNT - Account in foreign currency (for type CURRENT).
- INVESTMENT_FOREIGN_ACCOUNT - Investment account in foreign currency (for type CURRENT).
- DEPOSIT_ACCOUNT - Deposit account (for type SAVING).
- SAVING_ACCOUNT - Saving account (for type SAVING).
- SAVING_INTERNET - Internet saving account (for type SAVING).
- CHILDREN_PASSBOOK - Children passbook (for type SAVING).
- SAVING_CS - Ceska Sporitelna saving account (for type SAVING).
- BENEFIT_INVEST - Saving account benefit invest (for type SAVING).
- LOAN_ACCOUNT - Loan account (for type LOAN).
- MORTGAGE - Mortgage (for type LOAN).
- REVOLVING_LOAN - Revolving loan (for type LOAN).

### ACCOUNTNO (enum)

Account number. Account number consists of IBAN (IBAN plus optional BIC) identification or local account number (BBAN) plus mandatory bank code plus optional country code. This is due to fact, that using of IBAN format was not adopted in all the Erste group countries. Some applications of ACCOUNTNO are restricted to one of the two flavors only. F.i. when posting new SEPA payment orders sender and receiver accounts must be specified by IBAN format only, or when posting new Domestic payment in CSAS BBAN format should be used. However when requesting existing transactions the receiver account may be returned in format BBAN or IBAN (for SEPA payments). Therefore the ACCOUNTNO object may in some cases only contain IBAN, only local BBAN, or both.

#### Members

- ACCOUNTNO_BBAN
- ACCOUNTNO_IBAN

### ACCOUNTNO_BBAN (object)

Domestic account number format.

#### Properties

- number: 1019382023 (string, required) - Account number with possible prefix. Format is "XXXXXX-NNNNNNNNNN" if prefix is not null or "000000". If prefix is not provided then format is "NNNNNNNNNN" without leading zeros.
- bankCode: 0800 (BANKCODE, required) - Bank code.
- countryCode: CZ (COUNTRYCODE, optional) - Code of the country. Mandatory for international orders.

### ACCOUNTNO_IBAN (object)

Account number represented by iban.

#### Properties

- iban: CZ0708000000001019382023 (IBAN, required) - International account number.
- bic: GIBACZPX (BIC, optional) - Business identification code.

### ACCOUNTNO_FULL (object)

Full account number. Consists of IBAN (IBAN plus optional BIC) identification and local account number (BBAN) plus mandatory bank code plus optional country code.

#### Properties

- `cz-iban`: CZ0708000000001019382023 (IBAN, optional) - International account number.
- `cz-bic`: GIBACZPX (BIC, optional) - Business identification code.
- Include ACCOUNTNO_BBAN

### ACCOUNT_TRANSFER (object)

Payment for card account.

#### Properties

- type: REVOLVING_LOAN_DISBURSEMENT (ACCOUNT_TRANSFER_TYPE, required) - Type of the transfer.
- amount (AMOUNT, required) - Amount which should be transfered.

### ACCOUNT_TRANSFER_TYPE (enum)

Type of account transfer.

#### Members

- REVOLVING_LOAN_DISBURSEMENT - disbursement type of the transfer.
- REVOLVING_LOAN_REIMBURSEMENT - reimbursement type of the transfer.

### ADDITIONAL_INFO (object)

Structure for payment additional info

#### Properties

- text4x35: poznamka pro prijemce (array[string], required) - Message for payee set during payment order creation. It is used to identify transaction on receiver side. Array of texts 4x35.

### ADDRESS (object)

Object represents postal address.

#### Properties

- street: Antala Staška (string, required) - Street part of the address.
- streetNumber: 32 (string, optional) - Number which is unique in street. Not all localities have streets.
- buildingApartment: 1292 (string, optional) - Number which is unique in locality/town/village.
- zipCode: 140 00 (string, required) - Zip code of the address.
- city: Praha (string, required) - City where card should be sent.
- country: CZ (COUNTRYCODE, required) - Country of the address.

### ADDRESS_WITH_DESCRIPTION (ADDRESS)

Object represents postal address (with description).

#### Properties

- description (string, optional) - Additional description to address.

### AMOUNT

Amounts are objects that include the value, the precision and the currency. 

When AMOUNT is used as input value, maximum expected precision depends on currency.

| Currency | Max. precision |
| ------ | ------ |
| JPY | 0 |
| TND | 3 |
| all other | 2 |

If other restriction is used for given resource it would be stated in it's description.

#### Properties

- value: 242600 (number, required) - Value of an amount. Number without decimal part.
- precision: 2 (number, required) - Precision of the amount. How many digits from value fields should be considered to be decimal.
- currency: CZK (CURRENCY, required) - Amount currency.


### APPLICATION (object)

Every financial application client can have.    
 
#### Properties

- caseId: kdghsdgkajs (string, required) - Internal identifier of the case.
- name: Investment services contract foundation (string, required) - Name of the application.
- state: PROCESSING (string, required) - Actual state of the application. Possible value are: APPROVED, CANCELLED, PROCESSING, DELIVER_OF_CONFIRMATION, OPEN_APPLICATION, CLOSED_APPLICATION.
- creationDate: `12-03-2016` (string, required) - Date of the application request.    
- flags (array[string], optional) - Application flags for buttons. 
    - Sample
        - showButtonSign
    - Items
        - showButtonSign - The flag is returned if the application can be signed by client = state APPROVED.
        - showButtonDetail - Indicates whether the Detail operation is possible for the application = APPROVED, CANCELLED, and PROCESSING state.
        - showButtonDocumentUpload - The flag is returned if the application has possibility to upload some document = state DELIVER_OF_CONFIRMATION.
        - showButtonContinue - Indicates whether the Continue operation is possible for the application = state OPEN_APPLICATION.


### APPLICATION_ID (enum)

Application Id

#### Members

- GEORGE
- GEORGE_GO
- BRANCH_FE
- POST_OFFICE
- INTERNET_BANKING
- TELEPHONE_BANKER
- VIDEO_BANKER
- COLLECTION_BOX
- GSM
- ATM_OTHER
- ATM_PAYMENT

### APPLICATION_ID_LIMIT (enum)

Limit application id enum.

#### Members

- GEORGE
- INTERNET_BANKING
- BUSINESS24
- UNKNOWN

### AUTHORIZATION_LIMIT (object)

Authorization limit object.

#### Properties

- id: 934872973982 (string, required) - Internal ID for limit definition for authorization type, channel, application.
- authorizationType: TAC (AUTHORIZATION_TYPE, required) - Authorization method type for which is limit defined.
- channelId: NET_BANKING (CHANNEL_ID_LIMIT, required) - ID of the channel for which is limit defined.
- applicationId: GEORGE (APPLICATION_ID_LIMIT, required) - ID of the application for which is limit defined.
- dailyLimit (AMOUNT, optional) - Daily limit for particular authorization method.
- transactionLimit (AMOUNT, optional) - Transaction limit for particular authorization method.
- maxBankLimit (AMOUNT, optional) - Maximal limit for authorization method defined by bank.

### AUTHORIZATION_TYPE (enum)

Payment limit authorization type enum.

#### Members

- TAC
- TAN
- SMS
- PKI
- GRID_CARD
- EOK
- VOICE
- DISPLAY_CARD
- M_TOKEN

### BANKCODE (string)

Local bank code used in local bank clearing system, e.g. 5-digit bank code in AT, 4-digit bank code in CZ, SK.

#### Sample

- 0800

### BIC (string)

Business Identifier Code (also know as SWIFT ID/code) standard format (based on **ISO 9362**) has 8 or 11 characters, made up of:

* 4 letters: Institution Code or bank code
* 2 letters: ISO 3166-1 alpha-2 country code
* 2 letters or digits: location code
* 3 letters or digits: branch code, optional (possible default 'XXX' for primary office)

#### Sample

- GIBACZPX

### BUILDING (object)

Building object.

#### Properties

- id: 90CF22138A5209F3CA260FB2DECB3D9DCDF17E1D (string, required) - Unique product identifier.
- alias: test alias (string, optional) - User defined account name. Max. 50 characters.
- accountno (ACCOUNTNO_FULL, required) - Building saving account number.
- type: BUILD_SAVING (BUILDING_TYPE, required) - Type of the account.
- product: SS (string, required) - Product code.
- productI18N: Stavební spoření (string, required) - Product name.
- balance (AMOUNT, required) - Building saving account balance. For loans outstanding debt is served.
- status: ACTIVE (BUILDING_STATUS, required) - Status of the contract.
- contractHolders: Tomáš Spořitelný (array[string], optional) - Debtor. Will only set for loans.
    - Sample
        - Tomáš Spořitelný
- creditInterestRate: 2.3 (number, optional) - Basic credit interest rate, used for building saving deposits. Value in percentage.
- debitInterestRate: 4.3 (number, optional) - Basic debit interest rate, used for building loan. Value in percentage.
- saving (BUILDING_SAVING, optional) - Object which holds data for building saving.
- loan (BUILDING_LOAN, optional) - Object which holds data for building saving loan. 
- flags (array[string], optional) - Array of flags for building saving contract.
    - Sample
        - notRequestedBonus
    - Items
        - notRequestedBonus
        - accountQueryAllowed - User may see the transaction list for this product.

### BUILDING_EDITABLE (object)

Object which is used to change editable building saving/loan properties.

#### Properties

- id: 90CF22138A5209F3CA260FB2DECB3D9DCDF17E1D (string, optional) - Unique product identifier.
- alias: test alias (string, optional) - User defined account name. Max. 50 characters.

### BUILDING_LOAN (object)

Building loan object.

#### Properties

- loanAmount (AMOUNT, optional) - Loan amount.
- loanInstallment (AMOUNT, required) - Installment part of the loan monthly repayment.
- additionalSavings (AMOUNT, optional) - Saving part of the loan monthly repayment.
- paymentInsurance (AMOUNT, optional) - Insurance part of the loan monthly repayment.
- interestRateFromDate: `2012-02-14` (DATE, optional) - Current interest rate is valid from this date.
- interestRateToDate: `2016-02-14` (DATE, optional) - Current interest rate is valid to this date. If this field is not empty, then interest rate is considered to be variable otherwise it is fixed.

### BUILDING_SAVING (object)

Building saving object.

#### Properties

- targetAmount (AMOUNT, optional) - Target amount. Will not be set for loans.
- agreedMonthlySavings (AMOUNT, optional) - Agreed monthly savings amount for building savings. Will not be set for loans.
- expiryDate: `2017-02-14T00:00:00Z` (DATETIME, optional) - Notice period expiry date. Not set for loans.
- bonusBearingDepositToPay (AMOUNT, optional) - Remaining deposit to be paid to Building Savings till the end of this year to get annual Maximal Bonus.

### BUILDING_STATUS (enum)

Building status enum.

#### Members

- ACTIVE
- CLOSED

### BUILDING_TYPE (enum)

Building type enum.

#### Members

- BUILD_SAVING - For building savings.
- BUILD_LOAN - For building loans.

### BUNDLE (object)

Object which represents bundle. Bundle is collection of payment orders which can be authorized/signed at once.

#### Properties

- id: jf83ksapoe01 (string, required) - Bundle identifier.
- name: Balíček 1 (string, optional) - Name of the bundle.
- items (array[BUNDLE_ITEM], required) - Array of items in bundle. Every item represents payment order for batch sign. Max. 50 items in one bundle.

### BUNDLE_FOR_CREATE (object)

Object which is used to create bundle. Consists of all fields which can be used to create bundle. Bundle is collection of payment orders which can be authorized/signed at once.

#### Properties

- name: Balíček 1 (string, optional) - Name of the bundle.
- items (array[BUNDLE_ITEM_FOR_CREATE], required) - Array of items in bundle. Every item represents payment order for batch sign. Max. 50 items in one bundle.

### BUNDLE_ITEM (object)

Payment order in the bundle.

#### Properties

- id: 84521478awd85441 (string, required) - Payment order identifier.
- signInfo (object, required) - Sign info status information with signId as hash value for particular payment order as bundle item.
    - state: OPEN (SIGN_PROCESS_STATE, required) - State of the signing process for payment order.
    - signId: 2caf975faf9fbd7edb8c276abb6690ab30cf534d (string, optional) - Hash value of the payment order to be signed.

### BUNDLE_ITEM_FOR_CREATE (object)

Payment order in the bundle used in bundle creation.

#### Properties

- id: 84521478awd85441 (string, required) - Payment order identifier.
- signInfo (object, required) - Sign info status information with signId as hash value for particular payment order as bundle item.
    - state: OPEN (SIGN_PROCESS_STATE, required) - State of the signing process for payment order.
    - signId: 2caf975faf9fbd7edb8c276abb6690ab30cf534d (string, required) - Hash value of the payment order to be signed.

### BUNDLE_SIGN_PUT_RESPONSE (object)

Object which represents bundle. Bundle is collection of payment orders which can be authorized/signed at once.

#### Properties

- id: jf83ksapoe01 (string, required) - Bundle identifier.
- name: Balíček 1 (string, optional) - Name of the bundle.
- items (array[BUNDLE_ITEM_SIGN_PUT_RESPONSE], required) - Array of items in bundle. Every item represents payment order for batch sign.

### BUNDLE_ITEM_SIGN_PUT_RESPONSE (object)

Payment order in the bundle.

#### Properties

- id: 84521478awd85441 (string, required) - Payment order identifier.
- signInfo (object, required) - Sign info status information for particular payment order as bundle item. Signing of bundle is not atomic transaction, if some items fail and others succeed, it is normal case, therefore sign state of items in bundle can be different.
    - state: OPEN (enum, required) - State of the signing process for payment order.
        - OPEN - Order sign failed and should be signed again.
        - DONE - Order was signed succesfully.
    - signId: 2caf975faf9fbd7edb8c276abb6690ab30cf534d (string, optional) - Hash value of the payment order.

### CARD (object)

Card object.

#### Properties

- id: 76FABDF10FD983EA144FF90EB3EB64AAFC67A664 (string, required) - Card identifier.
- alias: moje zlata (string, optional) - User defined name of card. Max. 50 characters.
- owner: NOVÁKOVÁ JANA (string, required) - Product/card owner.
- number: 451161XXXXXX6044 (string, required) - Card number.
- sequenceNumber: 3 (string, required) - Card sequence number.
- productI18N: `Visa Classic debetní - Partner` (string, required) - Localized product name.
- productCode: 4511611 (string, optional) - Internal product code.
- expiryDate: `2014-07-31` (DATE, optional) - Expiration date of particular plastic card is valid.
- validFromDate: `2011-07-01` (DATE, optional) - Date from which this particular plastic card is valid.
- state: ACTIVE (CARD_STATE, required) - Current state of card.
- type: BANK_CARD (CARD_TYPE, required) - Card type.
- provider: ERSTE_BANK (CARD_PROVIDER, required) - Credit card provider/issuer.
- brand: MASTERCARD (BRAND, required)- Card issuing assiciation. 
- lockReason: THEFT (CARD_LOCK_REASON, optional) - Indicates reason for locking the card.
- characteristic: MAIN (CARD_CHARACTERISTIC, optional) - Card characteristic.
- balance (AMOUNT, optional) - Card balance.
- limit (AMOUNT, optional) - Card limit.
- outstandingAmount (AMOUNT, optional) - Card outstanding amount.
- minimalMonthlyAmount (AMOUNT, optional) - Card minimal monthly amount.
- installmentDueDate: `2011-07-08` (DATE, optional) - Installment reapyment due date.
- mainAccount (CARD_MAIN_ACCOUNT, optional) - Card main account.
- `cz-overallCardAccountLimits` (CARD_OVERALL_CARD_ACCOUNT_LIMITS, optional) - Card account limits.
- cardDeliveryMode: HOME (CARD_DELIVERY_MODE, optional) - Indicates how a client receives their card and PIN.
- features (array[string], optional) - Card features.
    - Sample
        - contactless
    - Items
        - contactless - Indicates whether contactless technology is available for this card.
        - reissuePin - Indicates whether reissuing a PIN is possible.
        - limitChange - Indicates that card limits could be changed for this card.
        - temporaryLimitChange - Indicates that card temporary limits could be changed for this card.
        - secureOnlineShopping - Indicates whether secure online shopping is available for this card.
        - cardDelivery - Indicates whether card delivery mode could be changed for this card.
        - onlineLocking - Indicates whether a card can be locked online.
        - replacementCard - Indicates that a replacement card could be ordered for this (bank) card.
        - automaticReplacement - Indicates that a card supports the automatic replacement.
        - onlineUnlocking - Indicates whether a card can be unlocked online.        
- flags (array[string], optional) - Card flags.
    - Sample
        - automaticReplacementOn
    - Items
        - notAccountOwner - User is only holder of the card not owner of card account.
        - contactlessEnabled - Indicates whether contactless functionality is active for given card.
        - secureOnlineShoppingEnabled - Indicates that 3D secure online shopping functionality is active for this card.
        - automaticReplacementOn - Indicates whether automatic card replacement is active for given card.
        - automaticReplacementChangeNotAllowed - Indicates whether automatic card replacement can be changed.
        - electronicStatementAllowed - User may see the electronic statements list and download statement for credit card (shadow account).
        - activationAllowed - Indicates that card can be activated.
        - displayPinAllowed - Indicates whether the client has the opportunity to display PIN of this card.

### CARD_3D_SECURE (object)

Card 3D secure.

#### Properties

- status: OK (CARD_3D_SECURE_STATUS, optional) - 3D secure functionality status.
- pam: Personal salutation (string, optional) - Personal Assurance Message (PAM) that user chose when activate 3D secure.
- phoneNumber: `+420 433974932` (string, optional) - Phone (used fot OTP authentification).
- language: cs (LANGUAGE, optional) - 3D secure language

### CARD_3D_SECURE_STATUS (enum)

Card 3D secure status.

#### Members

- OK
- NOT_ACTIVATED

### CARD_ACTION (object)

Card action object.

#### Properties

- action: LOCK_CARD (CARD_ACTION_ENUM, required) - Action on the card.
- lockReason: LOSS (CARD_ACTION_LOCK_REASON, optional) - Reason why card should be locked. Mandatory for action "LOCK_CARD".
- confirmations (array[CARD_ACTION_CONFIRMATION], optional) - Settings for confirmation mail for current action.

### CARD_ACTION_CONFIRMATION (object)

Card action confirmation.

#### Properties

- email: ard.holder@master.cz (string, required) - Email address where confirmation should be sent.
- language: cs (LANGUAGE, required) - Language of the confirmation email. Possible values are "en" and "cs".

### CARD_ACTION_ENUM (enum)

Card action enum.

#### Members

- REISSUE_PIN
- LOCK_CARD
- UNLOCK_CARD
- REPLACE_CARD
- ACTIVATE_CARD
- SET_AUTOMATIC_REPLACEMENT_ON
- SET_AUTOMATIC_REPLACEMENT_OFF

### CARD_ACTION_LOCK_REASON (enum)

Card action lock reasons.

#### Members

- THEFT
- LOSS

### CARD_CHARACTERISTIC (enum)

Card characteristics.

#### Members

- MAIN
- AUTHORISED

### CARD_DELIVERY (object)

This structure is used to change card delivery method for particular payment card.

#### Properties

- cardDeliveryMode: BRANCH (CARD_DELIVERY_MODE, required) - Card delivery mode for given payment card.
- branchId: 1075 (string, optional) - Identification of the branch where card will be ready to takeover.
- address (ADDRESS_WITH_DESCRIPTION, optional) - Address for card/pin sending.
- deliveryPhone: +420608457421 (string, optional) - Phone number of the client used when card is being delivered abroad.

### CARD_DELIVERY_MODE (enum)

Enumeration of possible values for card delivery.

#### Members

- BRANCH - New card will be delivered to issuing branch.
- OTHER_BRANCH - New card will be delivered to selected branch. Branch identifier should be set.
- HOME - New card will be delivered via post to home address.
- ADDRESS_ABROAD - New card will be delivered via post to address which is abroad.

### CARD_EDITABLE (object)

Object which is used to change editable card properties.

#### Properties

- id: 76FABDF10FD983EA144FF90EB3EB64AAFC67A664 (string, optional) - Card identifier.
- alias: moje zlata (string, optional) - User defined name of card. Max. 50 characters.

### CARD_LIMIT (object)

Card limit object.

#### Properties

- limitType: ATM (CARD_LIMIT_TYPE, required) - Limit type.
- period: 5D (CARD_LIMIT_PERIOD, required) - Bank limit's period in days defined for limit type.
- limit (AMOUNT, optional) - Current limit amount fot limit's type and period.
- temporaryLimit (AMOUNT, optional) - Temporary limit amount valid for limit's type and period.
- temporaryLimitExpiration: `2014-12-12T00:00:00+02:00` (DATETIME, optional) - Temporary limit amount valid for limit's type and period. Field is mandatory if temporatyLimits are changed by PUT call. It is possible to set temporaryLimitExpiration up to 120 hours to the future.
- bankLimit (AMOUNT, optional) - Maximum limit amount expiration defined by bank valid for limit's type and period.

### CARD_LIMIT_PERIOD (enum)

Card limit period.

#### Members

- 1D - 1 day.
- 7D - 7 days.
- 14D - 14 days.

### CARD_LIMIT_TYPE (enum)

Card limit types.

#### Members

- ATM
- POS
- INTERNET

### CARD_LOCK_REASON (enum)

Card lock reasons.

#### Members

- THEFT
- LOSS
- FRAUD
- OTHER

### CARD_MAIN_ACCOUNT (object)

Card main account.

#### Properties

- Include ACCOUNTNO_FULL
- holderName: Frany BeeOne (string, required) - Name of account owner.

### CARD_OVERALL_CARD_ACCOUNT_LIMITS (object)

Card overall account limits.

#### Properties

- limitATM (AMOUNT, optional) - ATM limit.
- limitPOS (AMOUNT, optional) - POS limit.

### CARD_TRANSFER (object)

Payment for card account.

#### Properties

- type: DEBT_REPAYMENT (CARD_TRANSFER_TYPE, required) - Type of the transfer.
- sender (CARD_TRANSFER_ACCOUNT_IDENTIFIER, required) - Identification of the account from which credit card debt will pay off.
- amount (AMOUNT, required) - Amount which should be transfered.

### CARD_TRANSFER_ACCOUNT_IDENTIFIER (object)

Identification of the account for card transfer.

#### Properties

- id: E7AA56C85D1B687A (string, optional) - Unique product identifier.
- accountno (ACCOUNTNO, required) - Account number.

### CARD_TRANSFER_TYPE (enum)

Type of card transfer.

#### Members

- DEBT_REPAYMENT - Repayment of the debt on the card account.

### CARD_PROVIDER (enum)

Card provider.

#### Members

- ERSTE_BANK
- EXTERNAL

### BRAND (enum)

Card issuing assiciation.

#### Members

- VISA
- MASTERCARD


### CARD_STATE (enum)

Card states.

#### Members

- ACTIVE - Card is active.
- INACTIVE - Card is issued but not activated yet.
- TEMPORARY_BLOCKED - Card is locked.

### CARD_TYPE (enum)

Card type.

#### Members

- CREDIT - Credit card.
- BANK_CARD - Debit card.

### CHANNEL_ID (enum)

Channel Id

#### Members

- NET_BANKING
- ATM
- MOBILE_BANKING
- BRANCH
- POST_OFFICE
- CALL_CENTRE
- VIDEO_BANKING

### CHANNEL_ID_LIMIT (enum)

Limit channel id enum.

#### Members

- NET_BANKING
- MOBILE_BANKING
- UNKNOWN

### CONFIRMATION_EMAIL (object)

Object which is used to properly send confirmation email.

#### Properties

- email: john.doe@test.com (EMAIL, required) - Email address where confirmation should be sent.
- language: cs (LANGUAGE, required) - Language of the confirmation email.

### CONFIRMATION_EMAILS (object)

List of confirmation emails.

#### Properties

- confirmations (array[CONFIRMATION_EMAIL], optional) - List of confirmation emails which will be sent.

### COUNTRYCODE (enum)

Country codes are in **ISO 3166-1** format, subtype ALPHA-2. This means two letters in uppercase.

#### Sample

- CZ

### CURRENCY (string)

Currency is in **ISO 4217** format (3 capital letters code).

#### Sample

- CZK

### DATE (string)

Date format without time (yyyy-MM-dd).

#### Sample

- `2011-07-14`

### DATETIME (string)

Dates are returned as **ISO 8601** dates and are used for both dates, times and timestamps. Using timezones is mandatory.

All dates returned by the API are in the corresponding time zone a record/data object is for. For Austrian dates (e.g. transfer timestamps) this means Central European Standard Time (CEST). Austria is UTC+1 in winter and UTC+2 in summer, so times usually read `+0100` or `+0200`. Should, at a later time, the API be applied to other countries, the corresponding time zone for a given data object has to be used.

**Note:** *Returning dates as UTC is discouraged because a client would not know what the intended target time zone is that a date has to be displayed in (e.g. an Austrian transaction still has to be shown with the correct Austrian execution time, even if the caller is using the API from e.g. the USA.)*

All dates provided by the client (e.g. a date for a future payment order) can be in any timezone. They will be converted to CEST on the server and this CEST version is used for all further processing - including storing or returning this now converted date to the client.

#### Sample

- `2011-07-14T19:43:37+0100`

### DIRECT_DEBIT (object)

Direct Debit.

#### Properties

- number: 2 (string, required) - Order number of the direct debit approval. It is unique per approval. Several versions of an approval have the same order number.
- type: DIRECT_DEBIT (DIRECT_DEBIT_TYPE, required) - Type of the approval. Possible values are DIRECT_DEBIT or SIPO.
- receiver (ACCOUNTNO, required) - Account number of the receiver.
- alias (string, optional) - Approval name chosen by the user.
- limit (AMOUNT, optional) - Limit for the single direct debit.
- limitSum (AMOUNT, optional) - Limit for the whole period.
- limitNumber: 5 (number, required) - Limit for the number of direct debits for the period.
- startDate: `2011-07-14` (DATE, required) - Beginning date for the approval.
- endDate: `2013-07-14` (DATE, optional) - End date for the approval.
- symbols (SYMBOLS, required) - Symbols structure for VS, SS, KS.
- dueMonth: 1 (number, optional) - The order of the month in the period when direct debits are acceptable. This must he null for period at least one month.
- dayFrom: 1 (number, optional) - The number of the day in month. From this day direct debits are acceptable. This can be not null only for period longer then one month.
- dayTo: 10 (number, optional) - The number of the day in month. To this day direct debits are acceptable.
- versionId: 1 (number, required) - Unique identifier for version of the direct debit approval.
- versionValidityDate: `2012-01-08` (DATE, required) - Date when the version comes into use.
- periodicity: 1 (number, required) - Number of period cycles in one period.
- periodCycle: MONTHLY (DIRECT_DEBIT_PERIOD_CYCLE, required) - Unit of the period cycle. Possible values are HALFYEARLY, MONTHLY, QUARTERLY, YEARLY, DAILY, WEEKLY, OTHER.

### DIRECT_DEBIT_PERIOD_CYCLE (enum)

Standing order execution interval.

#### Members

- DAILY
- WEEKLY
- Include FREQUENCY
- OTHER

### DIRECT_DEBIT_TYPE (enum)

Enumeration of possible valuer for direct debit type.

#### Members

- DIRECT_DEBIT - Direct debit.
- SIPO - SIPO.

### EDITABLE_TRANSACTION (object)

Object contains fields of the transaction which are editable by client.

#### Properties

- id: 100000189114334 (string, required) - Transaction identifier.
- note: New client's personal note for transaction (string, optional) - Client's transaction note. If left empty then existing note is deleted. Max. 4 000 characters.
- flags (array[string], optional) - Editable transaction flags.
    - Sample
        - hasStar
    - Items
        - hasStar - Indication that transaction is marked as important for client.
        - hasNote - Not editable flag. But if note is saved/deleted then this flag would appear/disappear.

### EMAIL (string)

Email address. Validated against pattern: ".+@(.+)$"

#### Sample

- john.doe@test.com

### FREQUENCY (enum)

Enumeration with possible frequencies.

#### Members

- MONTHLY - Monthly frequency.
- QUARTERLY - Quarterly frequency.
- HALFYEARLY - Halfyearly frequency.
- YEARLY - Yearly frequency.

### IBAN (string)

International bank account number. Based on **ISO 13616-1:2007**. A valid IBAN consists of all three of the following components: 

* Country Code (2 capital letters)
* Check digits (2 digits)
* BBAN (local Basic Bank Account Number consisting of 1-30 characters)

#### Sample

- CZ0708000000001019382023

### INSURANCE (object)

Insurance object.

#### Properties

- id: 0000000000519638 (string, required) - Unique product identifier.
- alias: Moje životko (string, optional) - `User-specific` alias of the contract. Max. 50 characters.
- type: LIFE (INSURANCE_TYPE, required) - Product type of insurance.
- product: 12 (string, required) - Code of the product.
- productI18N: Životní pojištění (string, required) - Name of the product.
- description (string, optional) - Additional description of insurance product, additional charges, index appliet to insurance contract.
- insurancePolicyHolder: Kamper Manfred (string, required) - The primary holder of the specific insurance contract.
- policyNumber: 12354821556535445 (string, required) - Agreement number.
- status: ACTIVE (INSURANCE_STATUS, required) - Insurance status.
- life (INSURANCE_LIFE, optional) - Life insurance.

### INSURANCE_BENEFICIARY (object)

Insurance beneficiary.

#### Properties

- type: PERSON (INSURANCE_BENEFICIARY_TYPE, required) - Type of the beneficiary.
- name: Mgr. Rudolf Mrazek (string, optional) - Name of the beneficiary.
- birthdate: `1978-01-18` (DATE, optional) - Birthdate of the beneficiary.
- percentage: 65 (number, required) - Percentage of the insurance contract determined to beneficiary or distributed by law. Value in percentage, e.g. 63 will be displayed as 63 %.
- unstructuredInfo (string, optional) - Attribute returns unstructured information about distribution among beneficiaries in a single string in 2 cases: 1) Distribution have never been changed (after modifying the distribution - information will be returned ina structured form); 2) BE did not cut up unstructured format.
- flags (array[string], optional) - Array of flags.
    - Item
        - beneficiariesChangeAllowed - Flag indicating possibility to change distribution among beneficiaries.
        - beneficiariesOngoingChange - Flag indicating ongoing change that has been already requested.

### INSURANCE_BENEFICIARY_TYPE (enum)

Type of the beneficiary.

#### Members

- BY_LAW
- PERSON
- UNSTRUCTURED

### INSURANCE_EDITABLE (object)

Object which is used to change editable insurance properties.

#### Properties

- id: 0000000000519638 (string, optional) - Unique product identifier.
- alias: Moje životko (string, optional) - `User-specific` alias of the contract. Max. 50 characters.

### INSURANCE_FUND (object)

Insurance fund.

#### Properties

- code: 31 (string, required) - Unique code of fund.
- name: Trendbond (string, required) - Name of fund.
- investedAmount: 75000 (number, required) - Current value invested into fund in CZK.
- investedShare: 65 (number, required) - Current value invested into fund in %.
- allocation: 35 (number, required) - Rate at which the savings component of the premium will be invested in selected funds. Value in percentage, e.g. 63 will be displayed as 63 %.
- totalInvestedAmount: 75000 (number, required) - Total invested value into all funds in CZK.
- investmentProgram (INSURANCE_INVESTMENT_PROGRAM_TYPE, optional) - Shows, whether a investment program is active for life insurance product.

### INSURANCE_INSUREE (object)

Array of insurees related to the insurance contract.

#### Properties

- type: POLICYHOLDER (INSURANCE_INSUREE_TYPE, required) - Type of person related to the insurance contract.
- id: 5888d1dee3bd488daa88cf6195ae31ce5d7ee06e (string, required) - Unique ID of the person related to the insurance contract. ID is hashed combination of contract number and birthnumber of the person: contractNumber_birthnumber.
- name (PERSON, required) Name of the person related to the insurance contract.
- addresses: PERMANENT_RESIDENCE (PROFILE_CONTACT_ADDRESS, optional) - Type of address. Possible values: PERMANENT_RESIDENCE, SECONDARY_RESIDENCE.
- birthnumber: 9005087056 (string, required) - Birth number.
- phoneNumber: 776123789 (string, optional) - Phone number of the person related to the insurance contract.
- email: franz@george.cz (EMAIL, optional) - Email address of the person related to the insurance contract.
- risks (array[INSURANCE_RISK], optional) - Array of the active risk products.

### INSURANCE_INSUREE_TYPE (enum)

Type of the person related to the insurance contract.

#### Members

- POLICYHOLDER
- INSURED_PERSON
- CHILD

### INSURANCE_INVESTMENT_PROGRAM_TYPE (enum)

Type of the investment program.

#### Members

- INVESTMENT_MANAGEMENT
- CONSEQ

### INSURANCE_LIFE (object)

Insurance life.

#### Properties

- premiumPaymentInterval: MONTHLY (INSURANCE_LIFE_PREMIUM_PAYMENT_INTERVAL, required) - Insurance premium payment interval frequency.
- premium (AMOUNT, required) -  The agreed premium for the specific insurance.
- contractEndDate: `2015-02-28` (DATE, required) - The agreed end date of the insurance contract.
- contractStartDate: `2011-02-28` (DATE, required) - The contract start date.
- insuredAmount (AMOUNT, required) - The agreed amount insured or risk covered by the insurance.
- currentCapitalValue (AMOUNT, required) - Capital value of the insurance. Amount of money in saving part of the insurance.

### INSURANCE_LIFE_PREMIUM_PAYMENT_INTERVAL (enum)

Insurance life premium payment interval frequency.

#### Members

- ONCE
- Include FREQUENCY
- UNKNOWN

### INSURANCE_PAYMENT (object)

Payment object for insurance product.

#### Properties

- id: 203 (string, required) - Payment identifier. Unique for current insurance.
- type (INSURANCE_PAYMENT_TYPE, required) - Type of the payment.
- transactionDate: `2016-01-21` (DATE, optional) - Payment date. Returned if payment has been paid already.
- amount (AMOUNT, required) - Payment amount. Amount which was received by insurance company.
- restToPay (AMOUNT, optional) - Rest which should be paid if payment instruction wasn't fully paid by this payment.
- instruction (AMOUNT, optional) - Payment instruction amount. Amount which should be paid for particular period.
- employerContribution (AMOUNT, optional) - Amount paid by employer (as benefit). It is included in the payment amount.
- instructionFrom: `2016-01-04` (DATE, optional) - Start date of the period for which payment instruction was created.
- instructionTo: `2016-02-04` (DATE, optional) - End date of the period for which payment instruction was created.

### INSURANCE_PAYMENT_TYPE (enum)

Type of the insurance payment.

#### Members

- ORDINARY - Ordinary regular payment.
- ONETIME - Onetime payment.
- EXTRAORDINARY - Extraordinary payment which wasn't linked with any instruction.
- FUTURE - Future payment.
- OVERDUE - Overdue payment.
- WITHDRAWAL - Capital value withdrawal.
- PARTIALLY_PAID - Partially paid payment.
- UNKNOWN - Partially paid payment.

### INSURANCE_RISK (object)

Insurance risk object for insurance contract.

#### Properties

- productName: Basic insurance in case of death for any reason (string, optional) - Name of the active risk product.
- riskGroup: Death (string, optional) - Group of the active risk product.
- insuredSum: 100000 (AMOUNT, optional) - Amount that an ​insurance ​company will ​pay after making a ​claim.
- frequency (string, optional) - Frequency in which insured sum may be paid.
- explanation (string, optional) - Description of the insured risk.

### INSURANCE_SERVICE (object)

Array of insurance services related to the insurance contract.

#### Properties

- group: RISK SPORTS (INSURANCE_SERVICE_GROUP, required) - Insurance service group.
- id: 1 (string, required) - Technical id of the service.
- iconGroup: RISK_SPORTS (INSURANCE_SERVICE_ICON, required) - Indicates the right icon for FE.
- nameI18N: Rizikov?sporty (string, required) - Name of the service.
- descriptionI18N: Zdarma poji?t??libovoln?ch 30 dn? v roce na aktivity jako horolezectv? bungee jumping, pot???nebo rafting. Sta? si jej aktivovat 2 hodiny p?ed pl?ovanou aktivitou. (string, required) - Description of the service.
- availableDays: 16 (string, optional) - For those number of days this service can be activated. Relevant only for group - RISK_SPORTS.
- activeFrom: `2016-08-18` (DATE, optional) - Starting date of active service. Relevant only for group - RISK_SPORTS.
- activeTo: `2016-08-26` (DATE, optional) - Ending date of active service. Relevant only for group - RISK_SPORTS.
- bonusAmount (AMOUNT, optional) - The amount of bonus.
- state: ACTIVATED (INSURANCE_SERVICE_STATE, required) - Indicates service state.

### INSURANCE_SERVICE_GROUP (enum)

Indicator for FE for grouping services to boxes.

#### Members

- RISK_SPORTS
- SERVICE

### INSURANCE_SERVICE_ICON (enum)

According to thi group FE should choose the right icon for the service.

#### Members

- RISK_SPORTS
- INDEXATION
- REVENUE_LOCKING
- NO_CLAIM_BONUS
- LOYALTY_BONUS
- DOUBLE_YIELD

### INSURANCE_SERVICE_STATE (enum)

Indicates service state.

#### Members

- ACTIVATED
- ACTIVE
- INACTIVE

### INSURANCE_STATUS (enum)

Insurance status.

#### Members

- ACTIVE
- CLOSED

### INSURANCE_TYPE (enum)

Insurance type.

#### Members

- LIFE

### LANGUAGE (enum)

List of possible languages used by netbanking api.

#### Members

- cs - Czech
- en - English

### LOAN_ACCOUNT_DATA (object)

Object holding specific data for loans

#### Properties

- interestRateToDate: `2016-07-14` (DATE, optional) - For mortgages this is the date of interest rate validity.
- loanAmount (AMOUNT, optional) - For loans this is contracted value of the loan.
- maturityDate: `2026-11-18` (DATE, optional) - For mortgages this is its maturity date.
- remainingLoanAmount (AMOUNT, optional) - For loans this is remaining amount for utilization. Basically this is disposable balance for loans.
- drawdownToDate: `2017-11-17` (DATE, optional) - Last date when you can use money which are available.
- drawdownAmount (AMOUNT, optional) - For mortgages this is actual drawdown amount.
- outstandingDebt (AMOUNT, optional) - Value of the principal. Value which should be paid back to bank.
- `cz-lumpsumRepayment` (AMOUNT, optional) - Amount of money to onetime repay whole loan.
- installmentFrequency (FREQUENCY, optional) - Frequency of the repayment.
- installmentDay (number, optional) - Day of the month when repayment should be paid (f.e. 22)
- nextRateAmount (AMOUNT, optional) - Repayment amount.
- nextRateDate: `2015-05-25` (DATE, optional) - Next date of the repayment (for loans).

### LOAN_REPAYMENT (object)

Object represents loan repayment.

#### Properties

- repaymentDate: `2016-01-05` (DATE, required) - Date of the repayment.
- amount (AMOUNT, required) - Repayment amount. What should be paid.
- paidAmount (AMOUNT, required) - Really paid amount.

### MARKETING_INFORMATION_AGREEMENT (MARKETING_INFORMATION_AGREEMENT_ENTRY)

Marketing information agreement object.

#### Properties

- channelId: PHONE (MARKETING_INFORMATION_AGREEMENT_CHANNEL, required) - Identifier of the channel which can be used for marketing communication.
- flags (array, optional) - Array of flags.
    - Items
        - editable - Indication whether agreement can be changed.

### MARKETING_INFORMATION_AGREEMENT_ACCEPTANCE (enum)

Consent or dissent with marketing communication.

#### Members

- ACCEPTED
- NOT_ACCEPTED

### MARKETING_INFORMATION_AGREEMENT_CHANNEL (enum)

Channel for marketing communication.

#### Members

- TELEBANKING
- INTERNET_BANKING
- PHONE
- ATM
- SMS
- MAIL
- EMAIL
- ACCOUNT_STATEMENT

### MARKETING_INFORMATION_AGREEMENT_ENTRY (object)

Marketing information agreement object used for change.

#### Properties

- channelId: PHONE (MARKETING_INFORMATION_AGREEMENT_CHANNEL, optional) - Identifier of the channel which can be used for marketing communication.
- acceptance: ACCEPTED (MARKETING_INFORMATION_AGREEMENT_ACCEPTANCE, required) - Information if communication via particular channel was accepted by client.

### MESSAGE (object)

Message object.

#### Properties

- id: 131371121204 (string, required) - Message identifier.
- from: Internet banking (string, required) - Name of the message sender.
- subject: Planned service upgrade (string, required) - Message subject.
- date: `2013-05-17T00:00:00+02:00` (DATETIME, required) - Date when message was created/generated.
- body: There is service outage planed today. (string, required) - Body of the message.
- attachments (array[MESSAGE_ATTACHMENT], optional) - Array of message attachments.
- flags (array[string], optional) - Array of flags.
    - Sample
        - unread
        - warning
    - Items
        - mandatory - Flag for mandatory message.
        - unread - This message is unread.
        - unsigned - This message is unsigned yet.
        - warning - Type of the message is warning.
        - info - Type of the message is information.

### MESSAGE_ATTACHMENT (object)

Object which represents attachment in message.

#### Properties

- id: attachment.pdf (string, required) - Attachment identifier.
- fileName: attachment.pdf (string, required) - File name of the attachment.
- fileSize: 1.37 (number, required) - File size of the attachment in MB.

### OWN_TRANSFER_RECEIVER (object)

Represents identification of the account which could be used as own transfer receiver.

#### Properties

- id: E7AA56C85D1B687A (string, required) - Account identifier.
- accountno (ACCOUNTNO_FULL, required) - Account number.

### PAGINATION (object)

Object which contains data with pagination information.

#### Properties

- pageNumber: 0 (number, optional) - Returned page number.
- pageCount: 1 (number, optional) - Number of pages calculated from page size and number of records.
- pageSize: 10 (number, optional) - The page size used. Either the number supplied by the client is returned here, or in case there was a limit and the valie is now smaller than the requested one, the actual size is given.
- nextPage: 1 (number, optional) - Page number of following page (provided only when exist)

### PAYMENT_BOOKING_DATE_REQUEST (object)

Payment booking date.

#### Properties

- receiver (ACCOUNTNO_FULL, required) - Receiver's account number.
- priority: STANDARD (PAYMENT_BOOKING_DATE_PRIORITY, optional) - Payment booking date priority.

### PAYMENT_BOOKING_DATE_PRIORITY (enum)

Payment booking date priority.

#### Members

- STANDARD
- URGENT

### PAYMENT_LIMIT (object)

Payment limit object.

#### Properties

- authorizationType: TAC (AUTHORIZATION_TYPE, required) - Authorization method type for which is limit defined.
- channelId: NET_BANKING (CHANNEL_ID_LIMIT, required) - ID of the channel for which is limit defined.
- applicationId: GEORGE (APPLICATION_ID_LIMIT, required) - ID of the application for which is limit defined.
- remainingAmount (AMOUNT, required) - Remaining Daily amount which can be transfered using particular authorization method and channel.

### PAYMENT_ORDER_CATEGORY (enum)

Payment order category

#### Members

- DOMESTIC
- OWN_TRANSFER
- INTERNATIONAL
- SEPA

### PAYMENT_ORDER_ENTRY (object)

Payment order entry object

#### Properties

- senderName: George Sporitelni (string, required) - Name of sender, who created payment order.
- sender (ACCOUNTNO_FULL, required) - Account number of the sender (embedded ACCOUNTNO type: IBAN with optional BIC or local account number with mandatory local bank code).
- receiverName: Jaroslav Drapalik (string, required) - Name of receiver of payment order.
- receiver (ACCOUNTNO_IBAN, optional) - In case of international payments receiver is represented by IBAN wiht optional BIC.
- receiver (ACCOUNTNO_FULL, required) - Account number of the receiver (embedded ACCOUNTNO type: IBAN with optional BIC or local account number with mandatory local bank code or free text account with bank code/BIC with country code).
- amount (AMOUNT, required) - Payment amount in defined currency.
- symbols (SYMBOLS, optional) - Symbols structure for VS, SS, KS.
- additionalInfo (ADDITIONAL_INFO, optional) - Payment Additional info structure with optional elements. This attribute corresponds to SEPA/SWIFT field remittanceInformation.
- senderReference: poznamka pro me (string, optional) - Message for me set during payment order creation.
- transferDate: `2014-03-12` (string, optional) - Requested due date entered by user (could be in near future), date when payment order should be transferred from user account.
- channelId: NET_BANKING (CHANNEL_ID, optional) - ID of the channel via which this payment order was entered/modified the last time.
- applicationId: GEORGE (APPLICATION_ID, optional) - ID of the application via which this payment order was entered/modified the last time. (This application ID could be used for filtering in payment list in future).
- flags (array[string], optional) - Array of flags for payment.
    - Sample
        - urgent
    - Items
        - urgent - Flag indicating urgent payment order (in SEPA, SWIFT and maybe also in local bank clearing systems) requested by client.

### PAYMENT_ORDER_ENTRY_FULL (object)

Complete payment order entry object, returned in response of POST and PUT call

#### Properties

- id: 84521478awd85441 (string, required) - Internal identifier of payment order. Note that after signing of the order the id could change.
- referenceId: R4HTUSHF4S6 (string, required) - Transaction reference ID (not a unique identifier, used by BE systems). Used to link payment order with transactions.
- orderCategory: DOMESTIC (PAYMENT_ORDER_CATEGORY, required) - Payment order category determines whether payment is domestic, SEPA, international or inside the bank (domestic, but could be different processing) or between accounts of the same user (domestic, but with better fee policy).
- orderType: PAYMENT_OUT (PAYMENT_ORDER_TYPE, required) - Payment order type (outgoing payment, outgoing direct debit, incoming direct debit) determines further transaction processing in BE.
- senderName: George Sporitelni (string, required) - Name of sender, who created payment order.
- sender (ACCOUNTNO_FULL, required) - Account number of the sender (embedded ACCOUNTNO type: IBAN with optional BIC or local account number with mandatory local bank code).
- receiverName: Jaroslav Drapalik (string, required) - Name of receiver of payment order.
- receiver (ACCOUNTNO_IBAN, optional) - In case of international payments receiver is represented by IBAN wiht optional BIC.
- receiver (ACCOUNTNO_FULL, required) - Account number of the receiver (embedded ACCOUNTNO type: IBAN with optional BIC or local account number with mandatory local bank code or free text account with bank code/BIC with country code).
- amount (AMOUNT, required) - Payment amount in defined currency.
- symbols (SYMBOLS, optional) - Symbols structure for VS, SS, KS.
- additionalInfo (ADDITIONAL_INFO, optional) - Payment Additional info structure with optional elements. This attribute corresponds to SEPA/SWIFT field remittanceInformation.
- senderReference: poznamka pro me (string, optional) - Message for me set during payment order creation.
- transferDate: `2014-03-12` (string, optional) - Requested due date entered by user (could be in near future), date when payment order should be transferred from user account.
- executionDate: `2014-02-12T00:00:00+02:00` (string, required) - Datetime when payment order was created/updated (the last time) by user (read-only field is automatically setup/changed by BE system based on POST/PUT request).
- expirationDate: `2014-02-15T00:00:00+02:00` (string, optional) - Datetime till when payment order will be repeated on BE in the case of insufficient funds on account.
- modificationDate: `2014-02-12T00:00:00+02:00` (string, optional) - Modification date indicates the last update of payment order done by user or BE system (read-only field provided by BE).
- cz-orderingDate: `2014-02-12T00:00:00+02:00` (string, optional) - Date and time which should be used for default ordering of the payment orders for display.
- cz-description: mobilni platba (string, optional) - Description of payment order, transaction type.
- state: OPEN (PAYMENT_ORDER_STATE, required) - State of payment order presented to user on FE, value is mapped based on provided BE technical states.
- stateDetail: OPN (PAYMENT_ORDER_STATE_DETAIL, required) - State detail of payment order provided based on BE technical states. Mapping between technical BE states and predefined FE detail states should be specified by local API. Value is used in FE to display status description.
- stateOk: true (boolean, required) - Indicator whether state (stateDetail value) of payment order is OK from user point of view.
- channelId: NET_BANKING (CHANNEL_ID, optional) - ID of the channel via which this payment order was entered/modified the last time.
- applicationId: GEORGE (APPLICATION_ID, optional) - ID of the application via which this payment order was entered/modified the last time. (This application ID could be used for filtering in payment list in future).
- flags (array[string], optional) - Array of flags for payment.
    - Sample
        - urgent
    - Items
        - urgent - Flag indicating urgent payment order (in SEPA, SWIFT and maybe also in local bank clearing systems) requested by client.
        - editable - Flag indicating if payment order can be edited by client.
        - deletable - Flag indicating if payment order can be deleted by client.
        - redoable - Flag indicating if payment order can be re-done.
- Include SIGNINFO_SIGNING_PROCESS

### PAYMENT_ORDER_FULL (object)

Complete payment order object

#### Properties

- id: 84521478awd85441 (string, required) - Internal identifier of payment order. Note that after signing of the order the id could change.
- referenceId: 785485694578 (string, optional) - Transaction reference ID provided by BE when payment order was executed.
- orderCategory: DOMESTIC (PAYMENT_ORDER_CATEGORY, required) - Payment order category determines whether payment is domestic, SEPA, international or inside the bank (domestic, but could be different processing) or between accounts of the same user (domestic, but with better fee policy).
- orderType: PAYMENT_OUT (PAYMENT_ORDER_TYPE, required) - Payment order type (outgoing payment, outgoing direct debit, incoming direct debit) determines further transaction processing in BE.
- senderName: George Sporitelni (string, optional) - Name of sender, who created payment order.
- sender (ACCOUNTNO_FULL, required) - Account number of the sender (embedded ACCOUNTNO type: IBAN with optional BIC or local account number with mandatory local bank code).
- receiverName: Jaroslav Drapalik (string, optional) - Name of receiver of payment order.
- receiver (ACCOUNTNO_IBAN, optional) - In case of international payments receiver is represented by IBAN wiht optional BIC.
- receiver (ACCOUNTNO_FULL, required) - Account number of the receiver (embedded ACCOUNTNO type: IBAN with optional BIC or local account number with mandatory local bank code or free text account with bank code/BIC with country code).
- amount (AMOUNT, required) - Payment amount in defined currency.
- symbols (SYMBOLS, optional) - Symbols structure for VS, SS, KS.
- additionalInfo (ADDITIONAL_INFO, optional) - Payment Additional info structure with optional elements. This attribute corresponds to SEPA/SWIFT field remittanceInformation.
- senderReference: poznamka pro me (string, optional) - Message for me set during payment order creation.
- transferDate: `2014-03-12` (string, optional) - Requested due date entered by user (could be in near future), date when payment order should be transferred from user account.
- executionDate: `2014-02-12T00:00:00+02:00` (string, required) - Datetime when payment order was created/updated (the last time) by user (read-only field is automatically setup/changed by BE system based on POST/PUT request).
- expirationDate: `2014-02-15T00:00:00+02:00` (string, optional) - Datetime till when payment order will be repeated on BE in the case of insufficient funds on account.
- modificationDate: `2014-02-12T00:00:00+02:00` (string, optional) - Modification date indicates the last update of payment order done by user or BE system (read-only field provided by BE).
- cz-description: mobilni platba (string, optional) - Description of payment order, transaction type.
- state: OPEN (PAYMENT_ORDER_STATE, required) - State of payment order presented to user on FE, value is mapped based on provided BE technical states.
- stateDetail: OPN (PAYMENT_ORDER_STATE_DETAIL, required) - State detail of payment order provided based on BE technical states. Mapping between technical BE states and predefined FE detail states should be specified by local API. Value is used in FE to display status description.
- stateOk: true (boolean, required) - Indicator whether state (stateDetail value) of payment order is OK from user point of view.
- channelId: NET_BANKING (CHANNEL_ID, optional) - ID of the channel via which this payment order was entered/modified the last time.
- applicationId: GEORGE (APPLICATION_ID, optional) - ID of the application via which this payment order was entered/modified the last time. (This application ID could be used for filtering in payment list in future).
- receiverAddress: Jeremenkova 32 (array[string], optional) - Receiver's address. Array of 3x text fields with max 35 characters each. First text - Street, Second text - ZIP code and City, Third text - Country code, name. (Used only for International payments).
- flags (array[string], optional) - Array of flags for payment.
    - Sample
        - deletable
    - Items
        - urgent - Flag indicating urgent payment order (in SEPA, SWIFT and maybe also in local bank clearing systems) requested by client.
        - editable - Flag indicating if payment order can be edited by client.
        - deletable - Flag indicating if payment order can be deleted by client.
        - cancelable - Flag indicating if future dated (already signed) payment order can be canceled by client.
        - redoable - Flag indicating if payment order can be re-done.
- Include SIGNINFO_SIGNING_PROCESS

### PAYMENT_ORDER_STATE (enum)

Payment order state

#### Members

- OPEN - Order is created and can be edited. It won't be executed if wouldn't be signed.
- SPOOLED - Order is prepared to be executed. It waits till all conditions are met (date, balance, etc.).
- CLOSED - Order is closed. Was executed or rejected by bank. No further action will be issued.

### PAYMENT_ORDER_STATE_DETAIL (enum)

Payment order state detail

#### Members

- OPN - Open - not signed yet.
- NGD - Insufficient funds - no disposable balance. Payment waits for funds. If funds are not transfered to source account it is cancelled after certain time (3-5 days - depends on account type).
- WER - Waiting for exchange rate. Bank is currently recalculating exchange rates.
- TRM - Marked as scheduled payment. Payment waits for transfer date.
- PNR - Payment Order from night register.
- FIN - Executed - finalized neutral.
- FIH - Executed - finalized today (current bankday)
- ABG - Rejected - rejected by bank. For more information about reason client should ask his bank advisor.
- INB - Being processed - in process.

### PAYMENT_ORDER_TYPE (enum)

Payment order type

#### Members

- PAYMENT_OUT
- DIRECT_DEBIT_IN

### PENSION (object)

Pension object.

#### Properties

- id: 8B1BA83D7CE9B8B2B677E914C3EDA4F78813040A (string, required) - Pension identifier.
- alias: moje penzijko (string, optional) - User defined account name. Max. 50 characters.
- owner: `Petr Kružík` (string, optional) - Name of the contract owner.
- signingDate: `2013-06-12` (DATE, optional) - Signing date.
- validFrom: `2013-08-01` (DATE, optional) - Valid from date.
- validTo: `2019-08-01` (DATE, optional) - Valid to date.
- agreementNumber: 8675590033 (string, required) - Agreement number.
- status: ACTIVE (PENSION_STATUS, required) - Status of the contract.
- productAccount (PENSION_PRODUCT_ACCOUNT, required) - Pension product account.
- productI18N: Penzijní připojištění (string, required) - Product description.
- product: 19 (string, required) - Product code.
- subtype: SUPPLEMENTARY_INSURANCE (string, required) - Product group.
- birthNumber: 9005087056 (string, required) - Birth number.
- paidBenefits (AMOUNT, required) - Paid benefits amount.
- strategy (PENSION_STRATEGY, optional) - Pension strategy.
- pensionAgreed (PENSION_AGREED, optional) - Pension agreed.
- savingTime (PENSION_SAVING_TIME, optional) - Pension saving time.
- contribution (PENSION_CONTRIBUTION, optional) - Pension contribution.
- supplementary (PENSION_SUPPLEMENTARY, optional) - Pension supplementary.
- beneficiaries (array[PENSION_BENEFICIARY], optional) - Beneficiaries for current pension contract.
- flags (array[string], optional) - Array of flags.
    - Sample
        - accountQueryAllowed
    - Items
        - accountQueryAllowed - User may see the transaction list for this product.

### PENSION_AGREED (object)

Pension agreed.

#### Properties

- oldAge: true (boolean, optional) - Old-age pension.
- disability: false (boolean, optional) - Disability pension.
- earlyRetirement: 13 (number, optional) - Early-retirement pension.

### PENSION_BENEFICIARY (object)

Beneficiary for pension product.

#### Properties

- name: `Jan Nožka` (string, required) - Beneficiary name.
- birthDate: `1984-12-21` (DATE, required) - Beneficiary birth date.
- birthNumber: 8412218245 (string, optional) - Beneficiary birth number.
- address (ADDRESS, optional) - Beneficiary address.
- share: 54 (number, required) - Beneficiary share. Value in percentage, e.g. 0,5 will be displayed as 0,5 %.
- entitlement: TAKEOVER (PENSION_BENEFICIARY_ENTITLEMENT, optional) - Entitlement type

### PENSION_BENEFICIARY_ENTITLEMENT (enum)

Possible entitlement types.

#### Members

- TAKEOVER - Entitlement takeover.

### PENSION_CONTRIBUTION (object)

Pension contribution.

#### Properties

- employer: true (boolean, required) - Employer contribution.
- participantAmount (AMOUNT, required) - Participant amount.
- otherPersonAmount (AMOUNT, required) - Other person amount.

### PENSION_EDITABLE (object)

Object which is used to change editable pension contract properties.

#### Properties

- id: 8B1BA83D7CE9B8B2B677E914C3EDA4F78813040A (string, optional) - Pension identifier.
- alias: moje penzijko (string, optional) - User defined account name. Max. 50 characters.

### PENSION_PRODUCT_ACCOUNT (object)

Pension product account.

#### Properties

- amount (AMOUNT, required) - Account balance.
- date: `2015-01-18` (DATE, required) - Date balance.

### PENSION_SAVING_TIME (object)

Pension saving time.

#### Properties

- supplementary: 51 (number, optional) - Supplementary pension saving time.
- oldAge: 51 (number, optional) - Old-age pension saving time.
- earlyRetirement: 51 (number, optional) - Early retirement saving time.

### PENSION_STATUS (enum)

Profile contact type enum.

#### Members

- ACTIVE
- TERMINATED
- PENSION_PAYMENT
- INTERRUPTED
- PAYMENTS_SUSPENDED
- PAYMENTS_DEFFERED
- SETTLED
- REPEALED
- NEGOTIATED

### PENSION_STRATEGY (object)

Pension strategy.

#### Properties

- conservative: 10 (number, optional) - Conservative strategy.
- balanced: 80 (number, optional) - Balanced strategy.
- dynamic: 10 (number, optional) - Dynamic strategy.
- stateBonds: 0 (number, optional) - State bonds strategy.

### PENSION_SUPPLEMENTARY (object)

Pension supplementary.

#### Properties

- email: franz@beeone.cz (string, optional) - Email communication.
- sms: 778525968 (string, optional) - SMS communication.
- maxService: true (boolean, optional) - Maximum service.  Deprecated attribute - deletation from the 1st of Jan 2017 
- optService: true (boolean, optional) - Optimum service.  Deprecated attribute - deletation from the 1st of Jan 2017 

### PERSON (object)

Person's name.

#### Properties

- titleBefore: Mgr. (string, optional) - Person's degree.
- firstname: Jan (string, required) - Person's first name.
- lastname: Novak (string, required) - Person's last name.
- titleAfter: Phd. (string, optional) - Person's additional degree.

### PHONE_BOOK_ENTRY (object)

Phone book entry

#### Properties

- alias: Graham Bell (string, optional) - Alias name of phone number entered by user for his better orientation in phone book.
- phoneNumber: 778525968 (string, required) - Phone number which will be saved in phone book.
- flags (array[string], optional) - Array of flags for record in phone book.
    - Item
        - isFavourite - Flag indicating if this record in phone book is starred by user.

### PHONE_BOOK (object)

Phone book

#### Properties

- id: 125635 (string, required) - Phone book entry identifier.
- alias: Graham Bell (string, optional) - Alias name of phone number entered by user for his better orientation in phone book.
- phoneNumber: 778525968 (string, required) - Phone number which will be saved in phone book.
- flags (array[string], optional) - Array of flags for record in phone book.
    - Item
        - isFavourite - Flag indicating if this record in phone book is starred by user.

### PLUGIN (object)

Plugin object.

#### Properties

- productCode: 11 (string, required) - Unique plugin identifier.
- name: Srdíčková tapeta (string, required) - Localized name of the plugin.
- standardFees (array[PLUGIN_FEE], optional) - Collection of standard fees for current plugin.
- settlementAccount (ACCOUNTNO_FULL, optional) - User settlement account for charging fees. Returned only for paid plugins.
- validUntil (DATE, required) - Date until plugin is valid.
- dateOfActivation (DATE, optional) - Date of activation of plugin for user. Returned for active plugins.
- flags (array[string], optional) - Array of flags for plugin.
    - Item
        - active - Indication whether plugin is active for current user.

### PLUGIN_FEE (object)

Object representing fee which should be paid for active plugin.

#### Properties

- timeOfCharging: IMMEDIATELY (PLUGIN_FEE_TIME_OF_CHARGING, required) - Time moment of changing the plugin fee.
- periodOfCharging: NON_RECURRING (PLUGIN_FEE_PERIOD_OF_CHARGING, required) - Frequency period of changing the plugin fee.
- amount (AMOUNT, required) - Fee amount defined for this plugin.

### PLUGIN_FEE_PERIOD_OF_CHARGING (enum)

Enumeration for possible period of charging for active plugin.

#### Members

- MONTHLY - Monthly.
- NON_RECURRING - There is no recurrence in fee payment.
- UNKNOWN - Unknown.

### PLUGIN_FEE_TIME_OF_CHARGING (enum)

Enumeration for possible time of charging for active plugin.

#### Members

- IMMEDIATELY - In the moment of the plugin activation.
- ACCOUNT_STATEMENT - In the moment of account statement issuing.
- UNKNOWN - Unknown.

### PROFILE (object)

Profile object.

#### Properties

- firstname: Jan (string, required) - User's first name.
- lastname: Novak (string, required) - user's last name.
- customerId: ABC123 (string, optional) - Internal ID of the customer (CLUID).
- salutation: Jane (string, optional) - Customer name used for salutation.
- instituteId: 1 (number, required) - Number of institute.
- marketingInfoAcceptance: ACCEPTED (PROFILE_MARKETING_INFO_ACCEPTANCE, required) - Has the customer accepted marketing info receiving?
- gender: MALE (PROFILE_GENDER, required) - User's gender.
- lastlogin: `2013-11-28T16:18:10Z` (DATETIME, optional) - Date and time of the last login of customer.

### PROFILE_CONTACT (object)

Profile contact object.

#### Properties

- id: postaladdresspermanent (string, required) - Unique ID of contact information.
- type: ADDRESS (PROFILE_CONTACT_TYPE, required) - Type of contact.
- flags (array[string], optional) - Array of contact flags.
    - Default
        - mainContact
    - Items
        - mainContact
- One Of
    - address (PROFILE_CONTACT_ADDRESS) - Address object if contact type is ADDRESS.
    - phone (PROFILE_CONTACT_PHONE) - Phone object if contact type is PHONE. 
    - email (PROFILE_CONTACT_EMAIL) - Email object if contact type is EMAIL.

### PROFILE_CONTACT_ADDRESS (object)

Profile contact address object.

#### Properties

- type: PERMANENT_RESIDENCE (PROFILE_CONTACT_ADDRESS_TYPE, required) - Address type.
- typeI18N: Trvalé bydliště (string, optional) - Localized name of address type.
- description (string, optional) - More detailed description of address, company name or department
- street: V Celnici (string, required) - Address street.
- streetNumber: 1985 (string, optional) - Address house number.
- buildingApartment: 85 (string, optional) - Address land registry number.
- zipCode: 15000 (string, required) - Address ZIP code.
- city: Praha (string, required) - Address city.
- country: CZ (COUNTRYCODE, required) - Country code.

### PROFILE_CONTACT_ADDRESS_TYPE (enum)

Profile contact address type enum.

#### Default

- PERMANENT_RESIDENCE

#### Members

- PERMANENT_RESIDENCE - For permanent residence address type.
- SECONDARY_RESIDENCE - For correspondance address type.

### PROFILE_CONTACT_EMAIL (object)

Profile contact email object.

#### Properties

- email: franz@george.cz (EMAIL, required) - Contact email address.
- type: PRIVATE (PROFILE_CONTACT_EMAIL_TYPE, required) - Email type.
- typeI18N: Osobní (string, optional) - Localized name of email type.

### PROFILE_CONTACT_EMAIL_TYPE (enum)

Profile contact email type enum.

#### Default

- PRIVATE

#### Members

- PRIVATE - For private type of email.

### PROFILE_CONTACT_PHONE (object)

Profile contact phone object.

#### Properties

- type: PRIVATE (PROFILE_CONTACT_PHONE_TYPE, required) - Phone type.
- typeI18N: Osobní (string, optional) - Localized name of phone type.
- countryCallingCode: 0420 (string, optional) - Country calling code as international phone number prefix. `E.g.: "0043" or "+43", "00420" or "+420", "00421" or "+421"`
- phoneNumber: 776123789 (string, required) - Contact phone number.

### PROFILE_CONTACT_PHONE_TYPE (enum)

Profile contact phone type enum.

#### Default

- PRIVATE

#### Members

- PRIVATE - For private type of phone.

### PROFILE_CONTACT_TYPE (enum)

Profile contact type enum.

#### Members

- ADDRESS - For address contact type.
- PHONE - For phone contact type.
- EMAIL - For email contact type.

### PROFILE_GENDER (enum)

Profile gender.

#### Members

- MALE
- FEMALE
- UNKNOWN

### PROFILE_LOGIN_INFO (object)

Profile login info.

#### Properties

- lastlogin (array)
    - channel: GEORGE (string, required) - Channel/Application identification for particular login.
    - lastlogin: `2014-01-23T11:38:52Z` (DATETIME, required) - Date of the last login.

### PROFILE_MARKETING_INFO_ACCEPTANCE (enum)

Profile marketing info acceptance.

#### Members

- ACCEPTED
- NOT_ACCEPTED
- UNKNOWN

### RESERVATION (object)

Object represents account reservation.

#### Properties

- type (RESERVATION_TYPE, required) - Type of reservation.
- status (RESERVATION_STATUS, required) - Reservation status.
- creationDate: `2015-09-18T21:43:53Z` (DATETIME, required) - Transaction date and time.
- expirationDate: `2015-09-25T21:43:53Z` (DATETIME, optional) - Reservation expiration date.
- merchantName: Pizzeria Grosseto (string, optional) - Merchant Name / ATM.
- `cz-merchantAddress`: Antala Staška 32, Praha (string, optional) - Merchant address.
- description: Platba kartou (string, required) - Reservation description, additional info.
- amount (AMOUNT, required) - Amount in account currency.
- amountSender (AMOUNT, optional) - Amount in transaction currency (not present if it is the same as amount).

### RESERVATION_STATUS (enum)

Enumeration with possible states of the reservation.

#### Members

- RESERVED - Amount is reserved.
- CANCELLED - Reservation was cancelled.
- EXPIRED - Reservation has expired.

### RESERVATION_TYPE (enum)

Enumeration with possible reservation types.

#### Members

- CASH_WITHDRAWAL
- PAYMENT
- CARD_PAYMENT
- OTHER

### SAVING_ACCOUNT_DATA (object)

Object which contains specific data for savings.

#### Properties

- interestRateOverLimit: 1.2 (number, optional) - In case of interest rate bands this is the interest rate which applies to value over limit.
- interestRateLimit (AMOUNT, optional) - Limit amount for basic credit interest rate used for some saving accounts.
- `cz-bonusInterestRate`: 0.6 (number, optional) - Bonus interest rates which can be gained if certain conditions are met.
- savingGoal: HOUSING (SAVING_GOAL, optional) - Saving purpose code (for some savings accounts).
- targetAmount (AMOUNT, optional) - For some savings accounts this is target amount of the saving.
- minimumBalance (AMOUNT, optional) - Minimum balance for some current and savings accounts.
- nextProlongation (DATE, optional) - The next prolongation date, when BE system will automatically credit regular deposit amount on saving account or calculate and transfer interest on term deposit.
- extraSavingMaximum (AMOUNT, optional) - Maximum amount of own transfer from current (master) to saving account (slave, this) used only for some saving accounts. Currently used only for Individualní spoření. Field contains maximum amount for current month (maximum for month minus already executed payments in current month).
- `cz-extraSavingMaximumMonthly` (AMOUNT, optional) - Maximum amount of own transfer from current (master) to saving account (slave, this) used only for some saving accounts. Currently used only for Individualni sporeni. Field contains maximum possible amount for all months (regardless already created payments).

### SAVING_GOAL (enum)

Enumeration of the possible saving goals for some saving accounts.

#### Members

- ELECTRONICS - Electronics
- WHITE_GOODS - White goods
- HOLIDAYS - Holidays
- SPORT - Sport equipment
- FURNITURE - Furniture
- CARS - Cars and accessories
- HOBBIES - Hobbies and garden
- GIFTS - Gifts and parties
- HEALTH - Health
- STUDIES - Studies
- HOUSING - Housing
- PERSONAL - Personal

### SAVING_TARGET (object)

Saving targets object.

#### Properties

- id: 1 (string, required) - Id of the saving target.
- title: SKODA Fabia (string, required) - Name of particular saving target.
- balance (AMOUNT, required) - Amount of actually saved money.
- targetAmount (AMOUNT, optional) - The amount of money client wants to save.

### SAVING_TARGET_ENTRY (object)

Saving target object containing attributes that are possible to change.

#### Properties

- title: SKODA Fabia (string, required) - Name of particular saving target.
- targetAmount (AMOUNT, optional) - The amount of money client wants to save.

### SAVING_TARGET_TRANSFER (object)

Entity for transfer between saving targets, from account balance to saving target or from saving target to account balance.

#### Properties

- amount (AMOUNT, required) - Amount of the transfer.
- senderId: 2 (string, optional) - Identifier of the source saving target. If not provided account balance is used as source.
- receiverId: 3 (string, optional) - Identifier of the destination saving target. If not provided account balance is used as destination.

### SECURITY (object)

Security object.

#### Properties

- id: 7CAB6A36D07103CFA1BAE1CABF5A5C9B755B4B46 (string, required) - Unique product identifier.
- alias: Maximilian Mustermann TEST (string, optional) - User defined alias for security portfolio. Max. 50 characters.
- accountno: 20031692500 (string, required) - "Account number" of security portfolio. The MUIN identifier.
- description: Majetkový účet (string, required) - Additional information like account name, name of principal account holder.
- balance (AMOUNT, required) - Account balance value.
- subSecAccounts (array[SECURITY_SUB_SEC_ACCOUNT], optional) - Array of securities sub accounts.
- flags (array[string], optional) - Array of flags.
    - Sample
        - accountQueryAllowed
    - Items
        - accountQueryAllowed - User may see the transaction list for this product.
        
### SECURITY_EDITABLE (object)

Object which is used to change editable securities account properties.

#### Properties

- id: 7CAB6A36D07103CFA1BAE1CABF5A5C9B755B4B46 (string, optional) - Unique product identifier.
- alias: Maximilian Mustermann TEST (string, optional) - User defined alias for security portfolio. Max. 50 characters.

### SECURITY_SUB_SEC_ACCOUNT (object)

Security sub account object.

#### Properties

- id: 20031692500 (string, required) - Sub securities internal identifier.
- titles (array[SECURITY_SUB_SEC_ACCOUNT_TITLE], optional) - Array of sub securities titles.

### SECURITY_SUB_SEC_ACCOUNT_TITLE (object)

Security sub account title object.

#### Properties

- title: RORENTO (string, required) - Title name of securitues investment.
- isin: ANN757371433 (string, required) - International Securities Identification Number (ISIN).
- numberOfShares: 498 (number, required) - Number of securities/shares.
- lastPrice (AMOUNT, required) - Last price of securities title.
- lastPriceDate: `2013-11-28T16:18:10Z` (DATETIME, required) - Date of securities last price evaluation.
- marketValue (AMOUNT, required) - Market value of securities title.
- securityType: UNKNOWN (enum, required) - Security product type.
    - Default
        - UNKNOWN
    - Members
        - UNKNOWN
- productGroup: UNKNOWN (enum, required) - Security product group.
    - Default
        - UNKNOWN
    - Members
        - UNKNOWN
- securityIndication: Reference quote (enum, required) - 
    - Default
        - Reference quote
    - Members
        - Reference quote

### SERVICE (object)

Service object.

#### Properties

- id: s54sdf756dfhm52879sdf23xd8744Fsdf5 (string, required) - Service identifier.
- nameI18N: Název služby (string, required) - Service name.
- iconGroup: DEFAULT (SERVICE_ICON_GROUP, required) - Icon Group.

### SERVICE_ICON_GROUP (enum)

Service Icon Group.

#### Default

- DEFAULT

#### Members

- DEFAULT

### SIGN_AUTHORIZATION_TYPE (enum)

Authorization methods.

#### Default

- TAC

#### Members

- NO\_AUTHORIZATION - validation of user response as confirmation (e.g. confirm button click)
- TAC - validation of user response as randomly generated number/code sent to user personal device via SMS
- CASE\_MOBILE - validation of user response using mobile application

### SIGN_IMMUTABLE_GET_RESPONSE (object)

Object for response of immutable GET signing method.

#### Properties

- authorizationType: TAC (SIGN_AUTHORIZATION_TYPE, required) - Identifier of preferred authorization method type (possible values NO\_AUTHORIZATION, TAC, CASE\_MOBILE). Method is listed in scenarios as the first one if there are any.
- Include SIGN_SCENARIOS
- Include SIGNINFO_SIGNING_PROCESS

### SIGN_IMMUTABLE_POST_REQUEST (object)

Object for request of immutable POST signing method.

#### Properties

- authorizationType: TAC (SIGN_AUTHORIZATION_TYPE, required) - Identifier of the authorization method type which was chosen by client (possible values NO\_AUTHORIZATION, TAC, CASE\_MOBILE). Method have to be listed in scenarios as the first one if there are any.

### SIGN_IMMUTABLE_POST_RESPONSE (object)

Object for response of immutable POST signing method.

#### Properties

- authorizationType: TAC (SIGN_AUTHORIZATION_TYPE, required) - Identifier of the authorization method which was launched by request (possible values NO\_AUTHORIZATION, TAC, CASE\_MOBILE). Method is listed in scenarios as the first one if there are any.
- challengeImage: `iVBORw0KGgoA...` (string, optional) - QR code in BASE64, only provided for CASE\_MOBILE. User smartphone must scan this image and mobile application should extract input parameters out of it.
- poll (SIGN_POLL_INFORMATION, optional) - Polling information for the requested order for CASE\_MOBILE.
- Include SIGNINFO_SIGNING_PROCESS

### SIGN_IMMUTABLE_PUT_REQUEST (object)

Object for request of immutable PUT signing method.

#### Properties

- authorizationType: TAC (SIGN_AUTHORIZATION_TYPE, required) - Identifier of the authorization method type which is currently in process (possible values NO\_AUTHORIZATION, TAC, CASE\_MOBILE).
- oneTimePassword: 12345 (string, optional) - OTP is in general temporary valid code for any challenge request code for particular authorization, e.g. OTP provided via SMS for TAC authorization or generated response code from smartphone application in CASE\_MOBILE authorization.

### SIGN_IMMUTABLE_PUT_RESPONSE (object)

Object for response of immutable PUT signing method.

#### Properties

- Include SIGNINFO_SIGNING_METHOD_DONE

### SIGN_MANAGEABLE_GET_RESPONSE (object)

Object for response of manageable GET signing method.

#### Properties

- authorizationType: TAC (SIGN_AUTHORIZATION_TYPE, required) - Identifier of preferred authorization method type (possible values NO\_AUTHORIZATION, TAC, CASE\_MOBILE). Method is listed in scenarios as the first one if there are any.
- Include SIGN_SCENARIOS
- Include SIGNINFO_SIGNING_PROCESS

### SIGN_MANAGEABLE_POST_REQUEST (object)

Object for request of manageable POST signing method.

#### Properties

- authorizationType: TAC (SIGN_AUTHORIZATION_TYPE, required) - Identifier of the authorization method type which was chosen by client (possible values NO\_AUTHORIZATION, TAC, CASE\_MOBILE). Method have to be listed in scenarios as the first one if there are any.

### SIGN_MANAGEABLE_POST_RESPONSE (object)

Object for response of manageable POST signing method.

#### Properties

- authorizationType: TAC (SIGN_AUTHORIZATION_TYPE, required) - Identifier of the authorization method which was launched by request (possible values NO\_AUTHORIZATION, TAC, CASE\_MOBILE). Method is listed in scenarios as the first one if there are any.
- challengeImage: `iVBORw0KGgoA...` (string, optional) - QR code or image in BASE64. Only provided for CASE\_MOBILE, user smartphone must scan this image and mobile application should extract input parameters out of it.
- poll (SIGN_POLL_INFORMATION, optional) - Polling information for the requested order for CASE\_MOBILE.
- Include SIGNINFO_SIGNING_PROCESS

### SIGN_MANAGEABLE_PUT_REQUEST (object)

Object for request of manageable PUT signing method.

#### Properties

- authorizationType: TAC (SIGN_AUTHORIZATION_TYPE, required) - Identifier of the authorization method type which is currently in process (possible values NO\_AUTHORIZATION, TAC, CASE\_MOBILE).
- oneTimePassword: 12345 (string, required) - OTP is in general temporary valid code for any challenge request code for particular authorization, e.g. OTP provided via SMS for TAC authorization or generated response code from smartphone application in CASE\_MOBILE authorization.

### SIGN_MANAGEABLE_PUT_RESPONSE (object)

Object for response of manageable PUT signing method.

#### Properties

- Include SIGNINFO_SIGNING_METHOD_DONE
- `cz-skipSenderReceiverNameBypassing`: false (boolean, required) - This is George specific flag. It is indication for George whether sender and receiver name should be send to George backend or not.

### SIGN_POLLING_RESPONSE (object)

Object for polling resource response.

#### Properties

- state: DONE (SIGN_POLLING_STATE, required) - State of the CASE\_MOBILE signing process.
- pollInterval: 5000 (number, required) - Polling interval in miliseconds. How often you should check.

### SIGN_POLL_INFORMATION (object)

Object for poll information using in signing.

#### Properties

- url: `http://www.csast.csas.cz/webapi/api/v2/sign/poll/160527036796442` (string, required) - Polling URL to retrieve state of the sign process. Signing process could be finished externally (for example by mobile application). In this case you are able to check state of the process.
- id: 160527036796442 (string, required) - Polling ID generated.
- interval: 5000 (number, required) - Polling interval in miliseconds. How often you should check.

### SIGN_SCENARIOS (object)

Array of possible signing scenarios (list of scenarios and their methods in predefined order).

#### Properties

- scenarios (array, optional) - Array of possible more scenarios (list of scenarios and their methods in predefined order). If there is only one scenario with one step then scenarios array isn't returned and only authorizationType property is used.
    - (array)
        - TAC (string)
        - CASE_MOBILE (string)
    - (array)
        - NONE (string)

### SIGNINFO_SIGNING_METHOD_DONE (object)

Object which contains information needed to sign changes which where made by current action.

#### Properties

- signInfo (object,required) - Object which contains information about the state of the current signing process.
    - state: DONE (SIGN_METHOD_DONE_STATE, required) - Field which controls whether signing is was already finished or you have to continue with next scenario method.
    - signId: 151112531008554 (string, optional) - Identifier of the change you are currently signing.

### SIGNINFO_SIGNING_PROCESS (object)

Object which contains information about signing process state and all relevant information needed to complete the process.

#### Properties

- signInfo (object,required) - Object which contains information about signing process state and all relevant information needed to complete the process.
    - state: OPEN (SIGN_PROCESS_STATE, required) - State of the signing process.
    - signId: 151112531008554 (string, optional) - Identifier of the change which you are signing right now.

### SIGN_METHOD_DONE_STATE (enum)

Enum for the states of the signing when signing method was finished successfully.

#### Members

- OPEN - Signing process hasn't been finished. You have to continue with next method in scenario in order to successfully sign change.
- DONE - Signing process was successfully finished and signed change was applied.

### SIGN_POLLING_STATE (enum)

Enum of sign states polling.

### Sample

- DONE

#### Members

- PROCESSING - Authorization in process.
- DONE - Authorizatin successfully finished.
- FALLBACK - Alternative authorization on FE should be activated.
- REJECTED - Authorization rejected by user, authorization flow should be closed in FE without signing

### SIGN_PROCESS_STATE (enum)

Enum for the states of the signing when signing is in process.

#### Members

- OPEN - Signing process hasn't been finished. You have to continue in order to successfully sign change.

### SIGN_REQUIREMENT_STATE (enum)

Enum which is used to indicate whether sign is needed or not.

#### Members

- OPEN - Change should be signed.
- NONE - Change shouldn't be signed. Action has been executed without signing.

### SIGNINFO_REQUIREMENT (object)

Object which contains information whether signing is required for current action. If yes then also identification of the change is present. This identification should be used for signing process.

#### Properties

- signInfo (object,required) - Object which contains information whether signing is required for current action. If yes then also identification of the change is present. This identification should be used for signing process.
    - state: OPEN (SIGN_REQUIREMENT_STATE, required) - Flag which controls whether signing is needed for current change.
    - signId: 151112531008554 (string, optional) - Identifier of the change which should be signed. Available only if state is "OPEN".

### STANDING_ORDER_BREAK (object)

Structure for break period in generation payment order from this standing order

#### Properties

- validFromDate: `2015-04-09` (string, required) - Date from when break period will be valid, the standing order will not be processed from this date.
- validToDate: `2015-07-09` (string, required) - Date till when break period will be valid, the standing order will not be processed till this date.

### STANDING_ORDER_ENTRY (object)

Standing order entry. Only subset of STANDING_ORDER_ENTRY_FULL object. Contains attributes required for creation of new standing order.

#### Properties

- type: STANDING_ORDER (STANDING_ORDER_TYPE, required) - Type of order. Possible values: STANDING_ORDER.
- subtype: SWEEP_OVER_LIMIT (STANDING_ORDER_SUBTYPE, optional) - Type of sweep order. Possible value: SWEEP_OVER_LIMIT.
- alias (string, optional) - Alias name of standing order entered by user for his better orientation in standing order list.
- receiverName: Greenpeace (string, optional) - Name of the standing order receiver. In case of SWEEP_UNDER_LIMIT this is actually sender.
- receiver (ACCOUNTNO_FULL, required) - Account number of the receiver.
- senderReference: pro prijemce (string, optional) - An external reference identification of the payer.
- amount (AMOUNT, required) - Standing order amount.
- nextExecutionDate: `2015-04-09` (DATE, required) - Date when the next order will be processed. Date is restricted to following days in month: 1-28 for type=STANDING_ORDER, 1-27 for type SWEEP_ORDER. Also day and month in this date must agree with intervalDueDay and intervalDueMonth.
- lastExecutionDate: `2016-04-09` (DATE, optional) - Date when the last order will be processed. Only applicable in combination with executionMode UNTIL_DATE
- executionMode: UNTIL_DATE (STANDING_ORDER_EXECUTION_MODE, required) - Execution mode. Possible values: UNTIL_DATE, UNTIL_CANCELLATION, AFTER_MAX_ITERATION_EXCEEDED or AFTER_MAX_AMOUNT_EXCEEDED.
- executionDueMode: DUE_LAST_DAY_OF_MONTH (STANDING_ORDER_EXECUTION_DUE_MODE, required) - Execution due mode. Possible values: DUE_DAY_OF_MONTH or DUE_LAST_DAY_OF_MONTH.
- executionInterval: MONTHLY (STANDING_ORDER_EXECUTION_INTERVAL, required) - Execution interval. Possible values: DAILY, WEEKLY, MONTHLY, BI_MONTHLY, QUARTERLY, HALFYEARLY, YEARLY, IRREGULAR. **NOTE** that only DAILY, MONTHLY, QUARTERLY, HALFYEARLY and YEARLY intervals are supported when entering new standing order. Other intervals are only for display of existing standing orders.
- intervalDueDay: 5 (number, optional) - Due day of month, day of month when the standing order will be reqularly executed.
- intervalDueMonth: 2 (number, optional) - Due date month in execution interval of standing order processing. Possible values: N/A for DAILY, WEEKLY, MONTHLY, 1-3 for QUARTERLY, 1-6 for HALFYEARLY, 1-12 for YEARLY.
- symbols (SYMBOLS, optional) - Symbols structure for VS, SS, KS.

### STANDING_ORDER_ENTRY_FULL (object)

Standing order entry atributes returned in response when creating new standing order.

#### Properties

- Include STANDING_ORDER_ENTRY
- number: 15856 (string, required) - Internal number of standing/sweep order which is used for signing of new standing order. When standing order will be created in BE, then it will be given new identification number.
- status: OK (STANDING_ORDER_STATUS, required) - Represents the status of the order. Possible value: OK.
- startDate: `2015-03-09T05:21:00+02:00` (string, required) - Date and time when the order is valid from.
- flags (array[string], optional) - Array of flags for messages.
- Sample
    - editable
- Items
    - editable - Flag indicating if standing order can be edited by client.
    - deletable - Flag indicating if standing order can be deleted by client.


### STANDING_ORDER_EXECUTION_DUE_MODE (enum)

Standing order execution due mode.

#### Members

- DUE_DAY_OF_MONTH - Due day of a month
- DUE_LAST_DAY_OF_MONTH - Due last day of a month

### STANDING_ORDER_EXECUTION_INTERVAL (enum)

Standing order execution interval.

#### Members

- DAILY
- WEEKLY
- BI_MONTHLY
- Include FREQUENCY
- IRREGULAR

### STANDING_ORDER_EXECUTION_MODE (enum)

Standing order execution mode.

#### Members

- UNTIL_DATE - Last execution date is already preset.
- UNTIL_CANCELLATION - Until cancellation. Last execution date not set.
- AFTER_MAX_AMOUNT_EXCEEDED - Until the predefined maximum amount to be transferred using the standing order is exceeded.
- AFTER_MAX_ITERATION_EXCEEDED - Until the predefined number of iterations is exceeded.

### STANDING_ORDER_FULL (object)

Full set of standing order atributes

#### Properties

- number: 1016 (string, required) - Internal number of the standing order respectively sweep order.
- status: OK (STANDING_ORDER_STATUS, required) - Represents the status of the order. Possible value: OK.
- type: STANDING_ORDER (STANDING_ORDER_TYPE, required) - Type of order. Possible values: STANDING_ORDER, SWEEP_ORDER.
- subtype: SWEEP_OVER_LIMIT (STANDING_ORDER_SUBTYPE, optional) - Type of sweep order. Possible values: SWEEP_OVER_LIMIT, SWEEP_UNDER_LIMIT. **NOTE** that the only possible value for new sweep order is SWEEP_OVER_LIMIT.
- alias (string, optional) - Alias name of standing order entered by user for his better orientation in standing order list.
- receiverName: Greenpeace (string, optional) - Name of the standing order receiver.
- receiver (ACCOUNTNO_FULL, required) - Account number of the receiver.
- senderReference: pro prijemce (string, optional) - An external reference identification of the payer.
- amount (AMOUNT, required) - Standing order amount.
- nextExecutionDate: `2015-04-09` (string, optional) - Date when the next order will be processed.
- scheduledExecutionDates (array[string], optional) - Array of real execution dates when scheduled payments will be generated from the standing order by BE processing in predefined period (next 30 days).
- realExecutionDate: `2015-04-09` (string, optional) - Real date when the standing order will be processed the next time, taking into account holidays and weekends and local BE processing for SO.
- lastExecutionDate: `2016-04-09` (string, optional) - Date when the last order will be processed. Only applicable in combination with executionMode UNTIL_DATE
- executionMode: UNTIL_DATE (STANDING_ORDER_EXECUTION_MODE, required) - Execution mode. Possible values: UNTIL_DATE, UNTIL_CANCELLATION, AFTER_MAX_ITERATION_EXCEEDED or AFTER_MAX_AMOUNT_EXCEEDED.
- executionDueMode: DUE_LAST_DAY_OF_MONTH (STANDING_ORDER_EXECUTION_DUE_MODE, required) - Execution due mode. Possible values: DUE_DAY_OF_MONTH or DUE_LAST_DAY_OF_MONTH.
- executionInterval: MONTHLY (STANDING_ORDER_EXECUTION_INTERVAL, required) - Execution interval. Possible values: DAILY, WEEKLY, MONTHLY, BI_MONTHLY, QUARTERLY, HALFYEARLY, YEARLY, IRREGULAR. **NOTE** that only DAILY, MONTHLY, QUARTERLY, HALFYEARLY and YEARLY intervals are supported when entering new standing order. Other intervals are only for display of existing standing orders.
- intervalDueDay: 5 (number, optional) - Due day of month, day of month when the standing order will be reqularly executed.
- intervalDueMonth: 2 (number, optional) - Due date month in execution interval of standing order processing. Possible values: N/A for DAILY, WEEKLY, MONTHLY, 1-3 for QUARTERLY, 1-6 for HALFYEARLY, 1-12 for YEARLY.
- symbols (SYMBOLS, optional) - Symbols structure for VS, SS, KS.
- startDate: `2015-03-09T05:21:00+02:00` (string, required) - Date and time when the order is valid from.
- break (STANDING_ORDER_BREAK, optional) - Structure for break period in generation payment order from this standing order. (When break is used, then no stoppages should be provided).
- maxIterations: 12 (number, optional) - Maximum number of iterations - processing of the standing order. Only applicable in combination with executionMode AFTER_MAX_ITERATION_EXCEEDED.
- maxAmount (AMOUNT, optional) - Maximum amount to be transferred using the standing order. Only applicable in combination with executionMode AFTER_MAX_AMOUNT_EXCEEDED.
- flags (array[string], optional) - Array of flags for messages.
- Sample
    - editable
- Items
    - editable - Flag indicating if standing order can be edited by client.
    - deletable - Flag indicating if standing order can be deleted by client.

### STANDING_ORDER_STATUS (enum)

Standing order status.

#### Members

- OK - Ok

### STANDING_ORDER_TYPE (enum)

Type of standing order.

#### Members

- STANDING_ORDER - Standing Order
- SWEEP_ORDER - Sweep Order

### STANDING_ORDER_SUBTYPE (enum)

Types of sweep order.

#### Members

- SWEEP_OVER_LIMIT - Sweep over limit
- SWEEP_UNDER_LIMIT - Sweep under limit

### STATEMENT (object)

Statement.

#### Properties

- id: 201302520130621161819 (string, required) - Statement identifier.
- number: 25 (number, required) - Statement sequence number.
- statementDate: `2013-06-21T14:18:19Z` (string, required) - Date and time of statement creation.
- periodicity: MONTHLY (STATEMENT_PERIODICITY, required) - Periodicity of account statement creation.
- format: PDF_A4 (string, required) - Format of account statement.
- language: cs (LANGUAGE, required) - Language od account statement.
- cz-fileTotalNumber: 2 (NUMBER, required) - Number of files for of the whole statement.
- cz-fileOrderNumber: 1 (NUMBER, required) - File number - to recognize order of the file if the statement is separated into several files. 

### STATEMENT_PERIODICITY (enum)

Periodicity enum values for statements.

### Members

- ONCE - Statement will be send only once.
- DAILY - Daily frequency.
- WEEKLY - Weekly frequency.
- Include FREQUENCY

### SUBACCOUNT (object)

Subaccount of the current account.

#### Properties 

- id: BCA4H6885D176E78 (string, required) - Subaccount identifier.
- accountno (ACCOUNTNO_FULL, required) - Subaccount account number.
- type: SAVING (ACCOUNT_TYPE, required) - Type of the subaccount product.
- subtype: SAVING_ACCOUNT (ACCOUNT_SUBTYPE, required) - Subtype type.
- product: 52 (string, required) - Subaccount product code.
- productI18N: Peníze stranou (string, required) - Localized subaccount product name.
- balance (AMOUNT, required) - Subaccount balance.
- creditInterestRate: 0.5 (number, required) - Basic interest rate for subaccount. Value in percentage, e.g. 0.5 will be displayed as 0,5 %.
- `cz-interestRateOverLimit`: 1.2 (number, optional) - In case of interest rate bands this is the interest rate which applies to value over limit.
- `cz-interestRateLimit` (AMOUNT, optional) - Limit amount for basic credit interest rate used for some saving accounts.

### SYMBOLS (object)

Structure for variable symbol, constant symbol and specific symbol.

#### Properties

- variableSymbol: 193460 (string, optional) - Variable symbol.
- constantSymbol: 0308 (string, optional) - Constant symbol.
- specificSymbol: 7853154453 (string, optional) - Specific symbol.

### TEMPLATE (object)

Template object.

#### Properties

- id: C8430E000200B404 (string, required) - Template identifier.
- name: Jan Novák (string, optional) - Template name defined by user.
- orderCategory: DOMESTIC (TEMPLATE_ORDER_CATEGORY, required) - Order category.
- receiver (ACCOUNTNO_FULL, required) - Receiver account number.

### TEMPLATE_ORDER_CATEGORY (enum)

Template order categorry.

#### Members

- DOMESTIC - Domestic payment.
- INTERNATIONAL - International payment.

### USER_SETTINGS (object)

User settings object.

#### Properties

- language: cs (LANGUAGE, required) - Preferred language.
- flags (array[string], optional) - Array of flags.
    - Items
        - displayInsurances - Insurance contracts are displayed in online banking.
        - displayLeasings - Leasing contracts are displayed in online banking.
        - displayBuildings - Buildings society contracts are displayed in online banking.
        - displayCreditCards - Credit cards are displayed in online banking.
        - displayInvestments - Investment securities are displayed in online banking.